import{_ as i,c as a,o as e,ak as n}from"./chunks/framework.BeJGjSYE.js";const c=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/TailwindCSS/Basis.md","filePath":"CSS/TailwindCSS/Basis.md","lastUpdated":null}'),t={name:"CSS/TailwindCSS/Basis.md"};function l(d,s,r,p,h,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to “基础”">​</a></h1><blockquote><p>安装这个我也没资格去总结,毕竟这个项目虽然用了,也只是用的cdn(根据官方文档来都搞不定,隔壁Nuxt项目直接用DevTool给加上了)<br> 这篇基础主要是掘金一位作者的文章个人总结,感觉能比个人直接看文档稍微系统一点.感谢.<br><a href="https://juejin.cn/user/2154698521972423/posts" target="_blank" rel="noreferrer">https://juejin.cn/user/2154698521972423/posts</a><br> 标题:听说你还不会TailwindCSS<br> 作者:菠萝的蜜</p></blockquote><p>好了,学到的终于用到了.可以收回开头第一句,Tailwind CDN转用官方配置了.<br><a href="https://stackoverflow.com/questions/77638671/tailwindcss-in-vitepress" target="_blank" rel="noreferrer">是在<code>Stackoverflow</code>上找到的答案,Vitepress里怎么配置TailwindCSS. </a><br> Tailwind有针对Vite使用方法,没针对VitePress的..</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to “安装”">​</a></h2><ol><li>基本安装</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tailwindcss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postcss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> autoprefixer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tailwindcss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 生成具有一定内容的配置文件tailwindcss / postcss</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>修改/添加样式适用范围:</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tailwind.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//export default{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content:[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;./docs/**/*.{md,js,vue,ts}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里针对Vitepress</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      &quot;./index.html&quot;,           </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;./src/**/*.{vue,js,ts,jsx,tsx}&quot;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //这两行针对一般Vite创建的Vue项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="3"><li><strong>自己找的,官网也没找到的内容:</strong></li></ol><ul><li>在<code>docs/.vitepress/</code>下创建<code>theme</code>文件夹.</li><li>创建CSS文件,用于放指令.</li></ul><div class="language-CSS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* docs/.vitepress/theme/custom.css */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> components;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utilities;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> components {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    .btn-primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> py-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">5 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bg-violet-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">500 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text-white</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> font-semibold</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rounded-full</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shadow-md</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-400 focus:ring-opacity-75;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>创建<code>index.ts</code>文件,用于引入样式</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* docs/.vitepress/theme/index.ts */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress/theme&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./custom.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultTheme</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后就可以用了.</p><p class="text-xs text-blue-300 font-bold">根本不知道这个theme文件夹,也不知道这个\`DefaultTheme\`又是什么.更不知道项目的入口还要自己创建.</p><p>开始时以为没正确配置,一直捣鼓<code>tailwind.config.js</code>的<code>content</code>,结果解决方法跟这个文件关系不大.</p><ol start="4"><li>如果是一般Vite项目,把<code>src/style.css</code>的内容改为<code>tailwind</code>指令就可以了.这个<code>style.css</code>会在<code>src/main.js</code>中被引入.(如果你没手动删除掉的话)</li></ol><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* src/style.css */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> components;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utilities;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./style.css&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="css知识" tabindex="-1">CSS知识 <a class="header-anchor" href="#css知识" aria-label="Permalink to “CSS知识”">​</a></h2><p>没错,用框架学原生.</p><h3 id="box-sizing" tabindex="-1">box-sizing <a class="header-anchor" href="#box-sizing" aria-label="Permalink to “box-sizing”">​</a></h3><table tabindex="0"><thead><tr><th>Class</th><th>Properties</th></tr></thead><tbody><tr><td>box-border</td><td>box-sizing: border-box;</td></tr><tr><td>box-content</td><td>box-sizing: border-content</td></tr></tbody></table><p><strong><code>border-box</code>:盒子的宽度和高度,包括<code>border</code>和<code>padding</code>的宽度.</strong><br><strong><code>border-content</code>:不包括盒子的<code>border</code>和<code>padding</code>,给的宽高只是内容的宽高,一般实质盒子的宽高大于这个数.</strong></p><h3 id="display" tabindex="-1">display <a class="header-anchor" href="#display" aria-label="Permalink to “display”">​</a></h3><table tabindex="0"><thead><tr><th>Class</th><th>Properties</th></tr></thead><tbody><tr><td>block</td><td>display:block;</td></tr><tr><td>inline-block</td><td>display:inline-block</td></tr><tr><td>inline</td><td>display:inline;</td></tr><tr><td>flex</td><td>display:flex;</td></tr><tr><td>inline-flex</td><td>display:inline-flex;</td></tr><tr><td>table</td><td>display:table;</td></tr><tr><td>inline-table</td><td>display:inline-table;</td></tr><tr><td>grid</td><td>display:grid;</td></tr><tr><td>hidden</td><td>display:none;</td></tr></tbody></table><ul><li>块级对象元素单独占行,多个block元素为各自新奇一行,并可设置width和height</li><li>内联对象元素前后不会产生换行,多个inline元素都在一行内显示,直到该行排满,不可设置width和height</li><li>既有宽高,又可同行显示,则为<code>inline-block</code>.<em>之后的内联对象元素会被排列在同一行内.</em></li></ul><h3 id="objection-position" tabindex="-1">Objection position <a class="header-anchor" href="#objection-position" aria-label="Permalink to “Objection position”">​</a></h3><p>可视范围超出图片大小时,将可看到的内容聚焦到特定方位上. <code>object-*</code>: <code>left-top</code>,<code>top</code>,<code>right-top</code>,<code>left</code>,<code>center</code>,<code>right</code>,<code>left-bottom</code>,<code>bottom</code>,<code>right-bottom</code>.</p><h3 id="overflow" tabindex="-1">Overflow <a class="header-anchor" href="#overflow" aria-label="Permalink to “Overflow”">​</a></h3><p>溢出内容后的内容要怎么显示.<br><code>overflow-*</code>:<code>auto</code>,<code>visible</code>,<code>hidden</code>,<code>scroll</code>,<code>clip</code>.(可以加xy轴限制特定方向,比如<code>x-scroll</code>,横向滑行条可拉动)</p><ul><li>默认<code>visible</code>.</li><li><code>overflow:scroll</code>,总是显示滚动条.</li><li><code>overflow:auto</code>是什么意思? 根据内容多少决定它的值?除了变<code>scroll</code>还有什么情况?</li><li><code>overflow:clip</code>,对溢出的内容进行裁剪,配合<code>overflow-clip-margin</code>.否则与<code>hidden</code>行为相似.</li></ul><h3 id="position" tabindex="-1">Position <a class="header-anchor" href="#position" aria-label="Permalink to “Position”">​</a></h3><table tabindex="0"><thead><tr><th>Class</th><th>Properties</th></tr></thead><tbody><tr><td>static</td><td>position:static;</td></tr><tr><td>fixed</td><td>position:fixed;</td></tr><tr><td>absolute</td><td>position:absolute;</td></tr><tr><td>relative</td><td>position:relative;</td></tr><tr><td>sticky</td><td>position:sticky;</td></tr></tbody></table>`,34)]))}const b=i(t,[["render",l]]);export{c as __pageData,b as default};
