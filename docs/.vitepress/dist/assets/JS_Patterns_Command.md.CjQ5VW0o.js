import{_ as n}from"./chunks/ImageWithCaption.C8QLn8Pq.js";import{D as h}from"./chunks/Divider.CC8vT4EF.js";import{c as k,o as e,ad as p,J as a,x as i,a as l}from"./chunks/vendor.G7bju0he.js";import"./app.CoC2MVze.js";const t="/refactoring/command/command-en.png",c=JSON.parse('{"title":"命令模式","description":"","frontmatter":{},"headers":[],"relativePath":"JS/Patterns/Command.md","filePath":"JS/Patterns/Command.md","lastUpdated":null}'),r={name:"JS/Patterns/Command.md"},b=Object.assign(r,{setup(E){return(d,s)=>(e(),k("div",null,[s[0]||(s[0]=p('<h1 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to “命令模式”">​</a></h1><blockquote><p><a href="https://refactoring.guru/design-patterns/command" target="_blank" rel="noreferrer">原文地址</a></p></blockquote><p><strong>命令模式</strong>是一种行为设计模式,它把一个请求转化为一个包含与执行操作的独立对象.这种转化可以让你把请求以方法参数的方式,延迟或以队列的形式执行请求,此外还可以支持一些无法平常实现的操作.</p><p><img src="'+t+'" alt="command"></p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to “问题”">​</a></h2><p>假设你在开发一个文本编辑应用.你现在要创建一个工具栏,包含一系列编辑器可以进行的操作.你创建了一个很简单的<code>Button</code>类,用以在工具栏上及其它各种弹窗中重复继承使用.</p>',6)),a(n,{src:"/refactoring/command/problem1.png",caption:"应用的所有按钮都源自一个相同的父类"}),s[1]||(s[1]=i("p",null,"虽然按钮看起来相似,但它们的作用是完全不同的.你要把每个按钮的事件处理代码放到哪里呢?最简单的一种解决方法是每个用到按钮的地方,各自创建子类,各自编写其中逻辑.这些子集各自包含按钮点击后需要执行的逻辑.",-1)),a(n,{src:"/refactoring/command/problem2.png",caption:"后续产生大量的子集.会产生什么问题呢?"}),s[2]||(s[2]=l(" 很快你就会发现这种方法已有很大的缺陷:子类的数量就不得不剧增,如果你不怕改父类代码导致子类崩溃的话,那还没那么大问题.换句话说,你整个应用的代码都变得十分依赖那些变化多端的逻辑代码了. ",-1)),a(n,{src:"/refactoring/command/problem3-en.png",caption:"几个类都实现了相同的功能"}),s[3]||(s[3]=p('<p>这就是最大的问题了.像复制粘贴文本这样的操作,需要从多个不同的地方调取.比如用户点击了&quot;Copy&quot;按钮,或选中右击菜单后复制,或直接Ctrl+C.</p><p>起初,如果我们的应用只需一个工具栏就够了的话,把各种操作的逻辑放到多个不同子类中,稍微还可以接受.可是当你实现了上下文菜单,快捷键和其它功能的时候,你不得不重复存在于不同类之中的操作代码,或让新的操作依赖于这些按钮,这就有大麻烦了.<br> (感觉自己也没看懂问题是什么?)</p><h2 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to “解决方法”">​</a></h2><p>好的设计模式总是能依赖分离原则(principle of separation of concerns)来解决问题的,它能把应用分成多个层次.<br> 最常见的例子是:一层用于UI展示,另一层用于处理业务逻辑.在C语言中,GUI层就是用于渲染漂亮的画面到屏幕上,捕获用户的输入,并展示用户的操作结果.<br> 而当需要进行一些关键操作时,比如计算月球轨道(?)或生成年度报告(?)时,GUI层就把这个任务交给专门的业务逻辑层来完成.</p><p>实现的代码大致如此:GUI对象调用业务逻辑对象的一个方法,并将参数传递过去.这个过程通常也被说成:一个对象,向另一个对象发出<em>请求(request)</em>.</p>',5)),a(n,{src:"/refactoring/command/solution1-en.png",caption:"GUI对象有时可以直接读取业务逻辑对象"}),s[4]||(s[4]=i("p",null,[l("命令模式一般建议GUI对象不直接发送这些请求,而是把所有请求的细节,比如要调用的对象,方法名,参数列表,单独抽取到一个"),i("em",null,"命令(command)类"),l("中,用单独的方法来触发这个请求."),i("br"),l(" 命令对象的作用是作为连接GUI对象和业务逻辑对象的桥梁.有了它后GUI对象就不需要知道业务逻辑对象是如何接收请求,如何处理请求了.它只需要下达命令就能处理其它细节了.")],-1)),a(n,{src:"/refactoring/command/solution2-en.png",caption:"通过命令访问业务逻辑层"}),s[5]||(s[5]=i("p",null,"下一步要做的是让命令实现相同的接口.一般它只有一个不需要参数的执行方法.这个接口可以让同一个请求发送者,使用各种不同的命令,而不用与具体的命令类进行耦合.除此之外,你还可以将命令对象连接到发送者上,从而在运行时有效提升发送者的效率.",-1)),s[6]||(s[6]=i("p",null,"你可能已经发现我们漏了什么东西,对,就是命令参数.GUI层对象可能需要向业务层对象传递一些参数.由于下达命令时我们是传不了参数的(命令不接受),我们要怎么准确下达命令呢?我们的解决方法是:命令自身应预先配置好一些参数数据,或是命令需要自身去获取.",-1)),a(n,{src:"/refactoring/command/solution3-en.png",caption:"GUI对象通过命令分发工作"}),s[7]||(s[7]=i("p",null,[l("回到我们的文本编辑器.我们套用到命令模式后,我们就不需要那么多的按钮子类,才实现各种点击行为了.我们只需要在基类"),i("code",null,"Button"),l("中加上一个单独的属性,它的值是命令对象的索引,点击时执行不同的命令就够了.")],-1)),s[8]||(s[8]=i("p",null,"你可能需要实现很多不同的命令类,从而满足不同的操作的结果.并将这些命令与特定的按钮连接起来,这取决于具体按钮需要执行的操作.",-1)),s[9]||(s[9]=i("p",null,"其它GUI元素,像菜单,快捷键,或对话框,都可以用这种方式来实现.它们都会在用户触发时下达各自的命令.你也估计知道了,不同元素,相同的操作,对应的都是相同的命令,这样就不用再重复代码了.",-1)),s[10]||(s[10]=i("p",null,"这样,命令就作为一个中间层,减少了GUI和业务逻辑层之间的耦合了.这只是这种模式的一点点好处而已!",-1)),s[11]||(s[11]=i("h2",{id:"真实世界的比喻",tabindex:"-1"},[l("真实世界的比喻 "),i("a",{class:"header-anchor",href:"#真实世界的比喻","aria-label":"Permalink to “真实世界的比喻”"},"​")],-1)),a(n,{src:"/refactoring/command/command-comic-1.png",caption:"饭店里点菜"}),s[12]||(s[12]=i("p",null,"逛完街后,你去了饭店,坐到窗户旁.此时服务员过来问你点什么菜,写到菜单上.然后服务员把菜单贴到墙上.不久后,主厨看到,取下菜单,并按照菜单开始煮菜.煮好后放到菜盘上,服务员看到后,检查一下菜盘上的菜是否已经按照菜单煮好了,然后端到你面前.",-1)),s[13]||(s[13]=i("p",null,"这里的菜单就是命令.它要等到厨师有空时才会被开始制作.菜单里包含了所有需要煮的菜.这个过程就省掉了主厨直接跟你确认点单的麻烦了.",-1)),a(h),s[14]||(s[14]=p(`<h2 id="可应用性" tabindex="-1">可应用性 <a class="header-anchor" href="#可应用性" aria-label="Permalink to “可应用性”">​</a></h2><p><strong>当你要将操作参数化为对象时可以使用这种模式.</strong></p><p>命令模式可以将特定的方法调用转化为独立对象.这种转变开创了许多有趣的可能性:你可以以方法参数的方法下达命令,把它们存到别的对象里,运行时中切换命令等等.<br> 举个例子:你要开发GUI组件,是个上下文菜单,你想让用户自行编辑菜单里的选项,而不影响各个按钮的功能.</p><p><strong>需要队列化操作,调度执行顺序,或远程执行时可使用命令模式.</strong><br> 命令对象跟其它对象一样可以被序列化,可以直接把它转换为字符串,存到文件或数据库里.后续再序列化一下就可以了.你可以以此延迟或调度命令的执行.不过当然不止于此,你还可以通过网络进行队列化,日志编写,或发送命令.</p><p><strong>当你要实现可逆操作时可用这种模式</strong><br> 虽然有很多实现撤销或重做的方法,但命令模式是其中最常用的一种.<br> 为了实现撤销,你需要实现展示操作过的命令历史.它是一个包含所有执行过的命令对象的栈,其中包括对应时刻应用的相关状态备份.<br> 这种方法有两个缺陷:</p><ol><li>不容易存储应用的状态,因为它们可能是私有的.这个问题可以改用Memento模式来缓解.</li><li>状态的备份可能需要浪费相当多的内存.因此你可能需要寻求另外的实现方式:与其存储过去的状态,不如实现当前指令的逆向操作.虽然逆向操作没那么容易实现,或者根本实现不了就是了.</li></ol><h2 id="如何实现这种模式" tabindex="-1">如何实现这种模式 <a class="header-anchor" href="#如何实现这种模式" aria-label="Permalink to “如何实现这种模式”">​</a></h2><ol><li>声明命令接口,包含唯一的执行方法.</li><li>把请求提取到具体的命令类中,在命令类中实现命令接口.每个类中都应包括多个用以存储请求参数的属性,以及一个指向实际接收者对象的引用.所有这些属性的值都要由命令构造器来实现初始化.<br> 3.区分作为命令发送者的类.为它们添加存储命令的属性.发送者只会通过命令接口,实现命令的交接.而且它们自身一般是不会创建命令对象的,只会从客户端代码中接收对象.</li><li>把发送者变化一下,这样它们就不用直接发送请求到接收者,而是执行命令了.</li><li>客户端应按照以下顺序初始化对象:</li></ol><ul><li>创建接收者对象.</li><li>创建命令,并按需把它们与接收者对象链接起来</li><li>创建发送者对象,并将它们与具体命令链接起来.</li></ul><h2 id="命令模式优缺点" tabindex="-1">命令模式优缺点 <a class="header-anchor" href="#命令模式优缺点" aria-label="Permalink to “命令模式优缺点”">​</a></h2><p><strong>优点</strong></p><ul><li><em>单一职责原则</em>.将调用类和操作类解耦开来.</li><li><em>开闭原则</em>.你可以在不破坏已有代码的情况下,为应用添加新的命令.</li><li>实现撤销/重做操作.</li><li>实现操作的延迟执行.</li><li>把多条简单命令整合成一条复杂命令.</li></ul><p><strong>缺点</strong></p><ul><li>代码可能会变得很臃肿,因为你在发送者和接收者之间增加了一个新的层面.</li></ul><h2 id="与其他模式的关系" tabindex="-1">与其他模式的关系 <a class="header-anchor" href="#与其他模式的关系" aria-label="Permalink to “与其他模式的关系”">​</a></h2><ul><li><p>责任链模式,命令模式,调和者模式,还有观察者模式,都是解决请求发送者和接收者之间耦合问题的.</p><ul><li><em>责任链模式</em>把请求按照链式传递下去,直到其中某个接收者完全解决完了相关问题.</li><li><em>命令模式</em>实现了发送者和接收者的单边联系(unidirectional connection).</li><li><em>调和者模式</em>消除了发送者和接收者间的直接联系,迫使它们必须经由调和对象才能实现通信.</li><li><em>观察者模式</em>让接收者动态地订阅或取消订阅接收请求.</li></ul></li><li><p>责任链模式中的处理器可以以命令的形式实现.这样你可以在同一个上下文对象(由请求提供)中实现多个不同的操作.<br> 不过还有其它的方法,就是直接把请求处理成一个<em>命令对象</em>.这样你就可以在连接成链的不同上下文中执行相同的操作了.</p></li><li><p>结合命令模式和记忆模式(Command and Memento)实现撤回操作.具体而言,命令模式负责对目标对象实现多个操作,记忆模式负责在命令执行前,对应目标对象相关状态的储存.</p></li><li><p>命令模式跟策略模式乍看很相似,因为你都可以用它们来参数化对象,向它们传递行为参数.不过模式的意图还是非常不同的:</p><ul><li>你可以用命令模式把任意操作转换成对象.操作需要的参数,就是对象的属性.这种转换可以让你延迟操作执行时机,队列化操作,存储命令执行历史,发送命令到远端服务等等...</li><li>而策略模式通常是解决同一个问题的不同方法,从而在同一个上下文类中切换不同的算法策略.</li></ul></li><li><p>原型继承可以在你需要把命令历史备份时帮上一点点忙.</p></li><li><p>你可以把&quot;访客(Visitor)&quot;模式看成一种强化版的命令模式.前者的对象可以在多个不同类的多个对象上执行操作.</p></li></ul><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to “代码示例”">​</a></h2><p><strong>使用例子</strong>: 命令模式在Typescript里时相当常见的.一般这种模式用于候补,为UI元素提供行为参数.它也用于队列化任务,追踪操作历史等等. <strong>模式辨认</strong>: 抽象接口类(发送者)调用另一个抽象接口类(接收者)内的方法,而这个方法在创建时已被命令的具体实现封装起来了.命令类一般限定于某些具体操作(?).</p><h2 id="理念例子" tabindex="-1">理念例子 <a class="header-anchor" href="#理念例子" aria-label="Permalink to “理念例子”">​</a></h2><p>以下例子解释了命令模式的代码结构,关注解决以下问题:</p><ul><li>它需要包括哪些类?</li><li>这些类各自的作用是什么?</li><li>模式的各个元素是如何联系起来的?</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Command接口只声明一个执行命令方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一些命令可以自行内部实现一些简单操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleCommand</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.payload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> payload;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`SimpleCommand: See, I can do simple things like printing \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然而一些命令可分配更复杂的操作给其它对象,这些对象称为&quot;receivers&quot;,接收者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComplexCommand</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> receiver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 私有数据,用于传递给receiver方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.receiver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receiver;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ComplexCommand: Complex Stuff should be done by a receiver object.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.receiver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.receiver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSomethingElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Receiver: Working on \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomethingElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Receiver:Also working on \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Invoker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> onStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> onFinish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOnFinish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onFinish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomethingImportant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invoker: Does anybody want something done before I begin?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onStart)){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onStart.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invoker: ...doing something really important...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invoker: Does anybody want something done after I finish?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onFinish)){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onFinish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object.execute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 客户端代码可以用任意命令,参数化我们的调用器(parameterize the invoker)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> invoker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Invoker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">invoker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Say Hi!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> receiver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">invoker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOnFinish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComplexCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(receiver, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Send email&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; Save report&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">invoker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSomethingImportant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div><hr><hr><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Invoker: Does anybody want something done before I begin?</span></span>
<span class="line"><span>SimpleCommand: See, I can do simple things like printing (Say Hi!)</span></span>
<span class="line"><span>Invoker: ...doing something really important...</span></span>
<span class="line"><span>Invoker: Does anybody want something done after I finish?</span></span>
<span class="line"><span>ComplexCommand: Complex stuff should be done by a receiver object.</span></span>
<span class="line"><span>Receiver: Working on (Send email.)</span></span>
<span class="line"><span>Receiver: Also working on (Save report.)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,25))]))}});export{c as __pageData,b as default};
