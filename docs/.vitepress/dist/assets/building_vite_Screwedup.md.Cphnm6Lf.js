import{_ as i}from"./app.CBEB_U2i.js";import{c as a,o as n,ad as e}from"./chunks/vendor.G7bju0he.js";const E=JSON.parse('{"title":"是搞砸的一次经历","description":"","frontmatter":{},"headers":[],"relativePath":"building/vite/Screwedup.md","filePath":"building/vite/Screwedup.md","lastUpdated":1729877121000}'),l={name:"building/vite/Screwedup.md"};function p(t,s,r,h,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="是搞砸的一次经历" tabindex="-1">是搞砸的一次经历 <a class="header-anchor" href="#是搞砸的一次经历" aria-label="Permalink to “是搞砸的一次经历”">​</a></h1><p>想优化一下这个网站,结果从原来的15s打包,变成了35秒!不愧是我!<br> 所以本篇的作用是自己在优化Vitepress时的一些总结,虽然反向优化了,但也要从中学习一点vite优化的操作.</p><h2 id="抛砖引玉" tabindex="-1">抛砖引玉 <a class="header-anchor" href="#抛砖引玉" aria-label="Permalink to “抛砖引玉”">​</a></h2><blockquote><p>:How to optimize vitepress app?</p></blockquote><blockquote><p>:1. Enable Gzip or Brotli Compression<br> 2. Optimize images<br> 3. Leverage Caching<br> 4. Reduce Bundle Size<br> 5. Minify CSS and JS<br> 6. Preload important resources<br> 7. Optimize fonts<br> 8. Reduce API calls<br> 9. Monitor Performance<br> 10. Use CDN for assets<br> 11. Utilize Vite plugins.</p></blockquote><p>应该不难看出,这就是标准的机器人回答了吧.<br> 那我就不客气了,一股脑利用插件给自己的应用,&quot;提升&quot;一下性能: 其实针对当前网站我只用了插件这一条,就是插件+自行配置完成一些资源的优化:</p><ol><li>Gzip压缩,用的<code>vite-plugin-compression2</code>; 打包出来的dist多了个<code>.gz</code>文件,15M变6K.至于怎么用好像就要部署时再解压了.</li><li>图片优化,用的<code>vite-plugin-image-optimizer</code>;似乎是压缩了图片,<code>assets</code>文件夹里多了好多小于10KB的新图片,命名还是加了乱码后缀的,应该是<code>ViteImageOptimizer()</code>的作用?</li><li>监控性能, 用的<code>rollup-plugin-visualizer</code>,就是打包之后多个html文件,查看打包后的文件各个部分大小.对当前项目而言,最占地方的是Vitepress提供的搜索功能,打包后大小有1M,去掉后打包直接从35S降到之前的15S.</li></ol><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ViteImageOptimizer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-image-optimizer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { visualizer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-visualizer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { compression } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-compression2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins:[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ViteImageOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            filename:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;whatever.gz&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        visualizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            open:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            filename:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bundle-visualizer.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>吐槽一下,这里为什么还要专门安装vite,专门从vite引入<code>defineConfig</code>?<br> 以下代码是运行不了的,说是某个依赖vitepress处理不了?</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {defineConfig} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vite:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plugins:[</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /**内容与上面一样 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><p>一些优化操作,在Next看到了,但实际使用上又要过脑才行,起码要闪过: 2. 图片优化,在Next里的自带组件<code>&lt;Image&gt;</code>就是优化后的结果.(这就是为什么在Next建议用<code>&lt;Image&gt;</code>取代原生的<code>&lt;image&gt;</code>)</p><p>3./6. 启用缓存和预加载重要资源. Next自动对资源/请求进行缓存,是Next本身实现的优化,以及对<code>fetch</code>请求的一些interception optimizations.<br> 预加载也是自带组件<code>&lt;Link&gt;</code>的一个功能</p><ol start="7"><li>字体优化,也是Next构建项目时就有的优化操作了.实现细节不详,但Next就是有这个优化</li></ol>`,12)]))}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
