import{_ as l}from"./chunks/ImageWithCaption.yiHrv4Rn.js";import{D as p}from"./chunks/Divider.DEAXDxeL.js";import{c as e,o as h,Z as t,H as n,x as i,a}from"./chunks/vendor.GdCD6OUn.js";import"./app.E6B-SwxD.js";const k="/refactoring/strategy/strategy.png",F=JSON.parse('{"title":"策略模式","description":"","frontmatter":{},"headers":[],"relativePath":"js/Patterns/Strategy.md","filePath":"js/Patterns/Strategy.md","lastUpdated":1741164455000}'),r={name:"js/Patterns/Strategy.md"},b=Object.assign(r,{setup(E){return(g,s)=>(h(),e("div",null,[s[0]||(s[0]=t("",8)),n(l,{src:"/refactoring/strategy/problem.png",caption:"一开始还好,功能越多,项目可能就膨胀一片混乱了"}),s[1]||(s[1]=t("",4)),n(l,{src:"/refactoring/strategy/solution.png",caption:"路线设计的各种策略"}),s[2]||(s[2]=i("p",null,[a("在我们的导航软件中,每个路线算法都可以提取到独立的包含"),i("code",null,"buildRoute"),a("方法的类中.这个方法接收起点和终点,并返回一个路线集合."),i("br"),a(" 尽管接收到相同的参数,每个路线类都可能创建出不同的路线.我们的导航主类无需关注路线是采用哪种算法计算出来的,它只需要关注如何在地图上渲染两点之间的路线就可以了.这个类中还包含一个用于切换路线策略的方法,这样用户就可以切换所需的策略行为了.")],-1)),s[3]||(s[3]=i("h2",{id:"真实世界的类比",tabindex:"-1"},[a("真实世界的类比 "),i("a",{class:"header-anchor",href:"#真实世界的类比","aria-label":"Permalink to “真实世界的类比”"},"​")],-1)),n(l,{src:"/refactoring/strategy/strategy-comic-1-en.png",caption:"到达机场的各种策略"}),s[4]||(s[4]=a(" 想象一下你要去机场.你可以搭公交;打的士;或者踩单车去.这些都是交通工具选择导致路线的不同.你可以根据花费限制,或时间紧迫程度选择适合你的策略. ")),n(p),s[5]||(s[5]=t("",19))]))}});export{F as __pageData,b as default};
