import{_ as i,c as a,a as t,o as n}from"./app.CC1Izy-N.js";const g=JSON.parse('{"title":"Set 新增的一些方法","description":"","frontmatter":{},"headers":[],"relativePath":"js/Set.md","filePath":"js/Set.md"}'),l={name:"js/Set.md"};function h(k,s,e,p,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="set-新增的一些方法" tabindex="-1">Set 新增的一些方法 <a class="header-anchor" href="#set-新增的一些方法" aria-label="Permalink to &quot;Set 新增的一些方法&quot;">​</a></h1><blockquote><p>原文地址:<a href="https://mp.weixin.qq.com/s/KFaXNSbdHlSj0uC4hQmSTg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/KFaXNSbdHlSj0uC4hQmSTg</a><br> 作者: 林三心不学挖掘机<br> 感觉有点用,是原本数组需要polyfill才能完成的.现在Set数据类型直接原生自带就实现了.</p></blockquote><p>共新增了7个方法: 交并差集(123),差集的并集(4).<br> 是否为子集,是否为超集,是否无交集(567,故返回的都是<code>true/false</code>)</p><ul><li><ol><li><code>intersection</code>, 找相同</li></ol></li><li><ol start="2"><li><code>union</code>, 合并,去重</li></ol></li><li><ol start="3"><li><code>difference</code>, 找不同, 有先后顺序,谁调用的就保留谁的</li></ol></li><li><ol start="4"><li><code>symmetricDifference</code>, 找不同,无先后顺序,两者不同的放到结果当中</li></ol></li><li><ol start="5"><li><code>isSubsetOf</code>, 调用的该集合,所有元素是否都存在于另一个集合当中.所有都在则true,有一个或多个不在,则返回false. 少的,在另一个多的之中是否都存在.(我有的是不是你早就有了,甚至比我还多?)</li></ol></li><li><ol start="6"><li><code>isSupersetOf</code>, 调用的集合,是否为另一集合的超集.父集且我有你没有,则返回true. 多的,在另一个少的之中是不是早都存在了.(我有的你是不是有一部分?)</li></ol></li><li><ol start="7"><li><code>isDisjointFrom</code>, 调用的集合是否与另一个集合无交集.</li></ol></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//for illustration</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intersection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set3).size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDisjointFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set3);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intersection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set2);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [2,3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set2);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[1,2,3,4]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">difference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[1,4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set4.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSubsetOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSupersetOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div>`,5)]))}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
