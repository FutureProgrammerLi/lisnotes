import{_ as a}from"./app.DIHfSNGC.js";import{c as e,o as i,ab as n}from"./chunks/vendor.cEhGAX-6.js";const g=JSON.parse('{"title":"React Compiler","description":"","frontmatter":{},"headers":[],"relativePath":"react/Compiler/React-Compiler.md","filePath":"react/Compiler/React-Compiler.md","lastUpdated":1732632945000}'),l={name:"react/Compiler/React-Compiler.md"};function t(r,s,p,h,c,o){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="react-compiler" tabindex="-1">React Compiler <a class="header-anchor" href="#react-compiler" aria-label="Permalink to “React Compiler”">​</a></h1><blockquote><p>跟React Server Component同时期提出的一个新工具,说是提升了性能,但还处在beta阶段,不推荐在生产环境使用.<br> 那就作为玩具,先了解一下吧~<br><a href="https://github.com/reactwg/react-compiler/discussions/5" target="_blank" rel="noreferrer">Introducing React Compiler(介绍文章,即本文)</a><br><a href="https://react.dev/learn/react-compiler" target="_blank" rel="noreferrer">React Compiler(官网)</a></p></blockquote><p>本文主要介绍ReactCompiler,以及如何在项目中运用它.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>本文还在编写中,随时可能变化.更多讨论在<a href="https://github.com/reactwg/react-compiler/discussions" target="_blank" rel="noreferrer">这里</a>,随时讨论到新东西随时更新到本文档中.<br> !React Compiler主推者是Lauren Tan!</p></div><p>ReactCompiler是一个新的构建时工具,用于自动优化React的性能表现,尤其提升页面更新(或是重渲染)时的效率.编译器就是为了配合已有的JS,TS代码,更好地履行并理解<a href="https://react.dev/reference/rules" target="_blank" rel="noreferrer">React规则</a>而被设计出来的.如果你的应用代码本来就很好的遵从了React的规则,那你大概是不用任何重写代码,直接把这个新东西引入到项目中就可以使用了.目前编译器仍处于Beta测试阶段,不过一些应用也将它投入到生产环境中使用了,比如比较出名的instagram.</p><p>为了实现应用的优化,<strong>ReactCompiler自动对你的部分代码进行记忆(memoize).</strong> 你可能对一些已有的实现记忆功能的API有所熟悉,比如<code>useMemo</code>,<code>useCallback</code>,以及<code>React.memo()</code>.你可以用这些API,明确地告诉React,哪部分代码如果输入没发生变化的话,就不用对其进行重计算,从而减少更新时所需的工作量.虽然这样做确实相当有效,但这样的工作终归是手动进行的,你有可能忘记了哪些代码需要被记住,或者你知道它们是哪些,但只因错误使用而可能引起更多的麻烦.结果就是React不得不检查你的UI是否存在有意义的更新,最终降低了整个页面的更新效率.</p><p>如果你认为已有的代码,在缓存方面已经做得非常好了,那恭喜你,你的代码编写能力相当棒!再引入编译器对性能的提升可能就没那么明显了.()在实践中精准地对代码段进行记忆,精准地找出依赖项,是一个相当困难的工作,而你我的英雄,你做到了!(开个玩笑,要做到全部及精准在应用层面上还是比较困难的.)</p><p>虽然说编译器与<code>Babel</code>是解耦的,不过就目前而言,我们还是将大部分功能整合到其中了.大部分比较出名的React框架都支持<code>Babel</code>,因此,可以说,有Babel,就有React Compiler的功能了.你可以看看<a href="https://react.dev/learn/react-compiler#installation" target="_blank" rel="noreferrer">对应的安装指南</a>.我们也会努力,把编译器的功能,整合到其它更多的工具中!</p><h2 id="编译器的功能" tabindex="-1">编译器的功能 <a class="header-anchor" href="#编译器的功能" aria-label="Permalink to “编译器的功能”">​</a></h2><p>说了这么多,编译器到底是干什么的呢?(其实上面也有答案了)<br> 首先我们来了解一下,为什么现在的React应用中,内容记忆愈发重要:</p><ol><li><strong>避免组件瀑布式地重渲染(cascading re-rendering).</strong><ul><li>假设虽然只有<code>&lt;Parent/&gt;</code>组件发生了变化,它的整颗组件树都不得不被重渲染.(它以及其所有子组件)</li></ul></li><li><strong>避免React以外的费时费力的计算.</strong><ul><li>比如你在组件里,或某个需要该数据的hook,调用了<code>expensiveProcessAReallyLargeArrayOfObjects()</code></li></ul></li><li><strong>记住副作用的依赖</strong><ul><li>为了确保某个hook的某个依赖,在重渲染之际保持全等状态,从而避免无限循环的错误.比如<code>useEffect()</code>的依赖.</li></ul></li></ol><p>初始版本的ReactCompiler聚焦于<strong>提升更新效率</strong>(比如重渲染已有组件),所以总的来说,ReactCompiler的作用主要是前两点.</p><h3 id="优化重渲染" tabindex="-1">优化重渲染 <a class="header-anchor" href="#优化重渲染" aria-label="Permalink to “优化重渲染”">​</a></h3><p>开发者使用React编写UI,主要是使用当时状态的函数(具体一点,当时状态包括props,state,context).当前实现中,每当组件的状态发生变化,React就会重渲染<em>对应组件</em>以及<em>其组件的所有子组件</em> -- 除非开发者手动地应用了记忆功能(比如<code>useMemo</code>,<code>useCallback</code>,<code>React.memo</code>等).<br> 举个例子,以下的代码中,每当<code>&lt;FriendList/&gt;</code>状态发生变化,<code>&lt;MessageButton&gt;</code>也会跟着重渲染.</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FriendList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> onlineCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useFriendOnlineCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(friends.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoFriends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{onlineCount} online&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {friends.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">friend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FriendListCard</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{friend.id} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{friend} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ))}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MessageButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>而如果你使用了ReactCompiler,它就会自动将记忆的工作应用到<code>&lt;MessageButton/&gt;</code>上,从而确保只有相关的状态变化引起的重渲染,才引起该组件的重渲染.我们把这种自动记忆的功能称为&quot;调试好的响应性&quot;(fine-grained reactivity).<br> 还是上面的例子,ReactCompiler还会决定尽管<code>friends</code>状态发生变化,<code>&lt;FriendListCard/&gt;</code>的返回值依旧可被重用,避免重建这部分的JSX,避免状态<code>onlineCount</code>变化时引起<code>&lt;MessageButton&gt;</code>的重渲染.</p><h3 id="计算量大的状态也会被记忆" tabindex="-1">计算量大的状态也会被记忆 <a class="header-anchor" href="#计算量大的状态也会被记忆" aria-label="Permalink to “计算量大的状态也会被记忆”">​</a></h3><p>编译器也可以自动记忆以下场景:</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下方法不会被React Compiler记住,因为它不是组件或是hook.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> expensiveProcessAReallyLargeArrayOfObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下会被RC记住,因为它是个组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TableContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这个函数调用会被记住</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> expensiveProcessAReallyLargeArrayOfObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>不过,如果<code>expensiveProcessAReallyLargeArrayOfObjects()</code>真的十分耗时耗力,我们还是建议你在React之外实现针对性的记忆,因为:</p><ul><li>RC只会记忆React Components和hooks, 不是所有的函数都会被记住</li><li>RC的记忆功能并不会在多个组件或hooks之间共享.</li></ul><p>因此,如果<code>expensiveProcessAReallyLargeArrayOfObjects()</code>函数在多个不同组件中都被调用了,哪怕传的参数是相同的,那这个函数还是会被重复地被调用.我们建议这样复杂的函数在形成之前,就对其进行一下&quot;耗时衡量&quot;.(<a href="https://react.dev/reference/react/useMemo#how-to-tell-if-a-calculation-is-expensive" target="_blank" rel="noreferrer">怎么衡量一个函数是否耗时耗力?</a>)</p><h2 id="仍处于发展状态的一个功能-副作用的依赖记忆-memoization-for-effects" tabindex="-1">仍处于发展状态的一个功能:副作用的依赖记忆(Memoization for effects) <a class="header-anchor" href="#仍处于发展状态的一个功能-副作用的依赖记忆-memoization-for-effects" aria-label="Permalink to “仍处于发展状态的一个功能:副作用的依赖记忆(Memoization for effects)”">​</a></h2><p>RC当前遇到的问题是,实际应用中,编译器对副作用的记忆项,跟源代码,已有的记忆项不相匹配.这大概是个优点?因为编译器找到的记忆项一般比开发者自己手动找的记忆项颗粒度更高.<br> 比如说,编译器的记忆功能用的是原始值记忆,而不是通过<code>useMemo</code>实现的,所以当需要生成记忆代码时不用遵循Hooks的规则,同时,它也能安全地记住hooks的调用.(?)</p><p>不过因此可能产生的问题是,某些已经被记住的项,不久后发生了变化.这种常见出错的场景是,副作用hooks,<code>useEffect()</code>,<code>useLayoutEffect()</code> -- 为了避免无限循环,或不触发/过度触发,而依赖一些不会变化的状态.当你的应用中发现了React Compiler确实有这样的情况,记得向我们<a href="https://github.com/facebook/react/issues" target="_blank" rel="noreferrer">提出问题</a>.</p><p>React团队依旧在极力解决这个问题.当前的编译器,自动记忆的功能可以很大程度与手动记忆相同.如果二者记忆项不能确保相同,也就表明组件,或hook是安全的,RC已经不用对其发挥作用了.</p><p>因此我们建议,代码中已有的<code>useMemo()</code>或<code>useCallback()</code>尽量维持原状,原有什么样就保持什么样.RC会尽可能生成更多可选的优化代码,但如果生成的代码影响原有的记忆行为,那它就会跳过自己生成的代码,保持原本的记忆行为.<br><strong>已有的<code>useMemo</code>,<code>useCallback</code>就保持原状,新加入的代码,有了RC,就可以有意避免对这些API的依赖了.</strong></p><h2 id="编译器会作用于哪些代码-assume" tabindex="-1">编译器会作用于哪些代码(assume) <a class="header-anchor" href="#编译器会作用于哪些代码-assume" aria-label="Permalink to “编译器会作用于哪些代码(assume)”">​</a></h2><p>编译器会作用于以下代码:</p><ol><li>合法有意义的JS代码</li><li>测试中存在的,访问前被定义的,可空/可选的值和属性.(比如说启用了Typescript的<code>strictNullChecks</code>功能),<br> 举例说,<code>if(object.nullableProperty){object.nullableProperty.foo}</code>,或是可选链\`object.nullableProperty?.foo</li><li>遵循React规则的代码</li></ol><p>RC可以静态校验多条React规则的使用,自动跳过违反规则的代码.对于产生错误的代码,我们建议使用<a href="https://www.npmjs.com/package/eslint-plugin-react-compiler" target="_blank" rel="noreferrer">eslint-plugin-react-compiler</a>查看并改正错误</p><h3 id="我写的代码被编译器纠错啦" tabindex="-1">我写的代码被编译器纠错啦! <a class="header-anchor" href="#我写的代码被编译器纠错啦" aria-label="Permalink to “我写的代码被编译器纠错啦!”">​</a></h3><p>你可以看看<a href="https://github.com/reactwg/react-compiler/discussions/8" target="_blank" rel="noreferrer">编译器是如何成功的找到代码库里的错误的</a>.</p><h2 id="编译器的作用范围有多大-see" tabindex="-1">编译器的作用范围有多大?(&quot;see&quot;) <a class="header-anchor" href="#编译器的作用范围有多大-see" aria-label="Permalink to “编译器的作用范围有多大?(&quot;see&quot;)”">​</a></h2><p>当前的RC每次以单个文件作为工作范围,也就是说RC会针对每个单独的文件进行代码优化.虽然乍看这个工作范围优点小,但我们却发现这个范围出奇的设置得好,而这一切,得益于React的编程理念:使用原生JS值,遵循对编译器友好的习惯和规则.当然,有得就有舍:无法得知其它文件的信息,实现更大程度的优化.但无论怎么说,当前单文件的工作范围设置,很好地平衡了编译器的工作复杂度及其输出质量,甚至可以说是利大于弊了.</p><p>虽然当前的编译器没有使用像TS或Flow这样带有类型的JS,但它内部有自己的类型系统,足以比较完善地理解您的代码了.</p><p>感谢你能看到这里!</p>`,37)]))}const E=a(l,[["render",t]]);export{g as __pageData,E as default};
