import{_ as a}from"./app.DOQjh19Y.js";import{c as n,o as i,ab as l}from"./chunks/vendor.Behu2R7A.js";const o=JSON.parse('{"title":"How JSX works","description":"","frontmatter":{},"headers":[],"relativePath":"react/JSX/How-JSX-Works.md","filePath":"react/JSX/How-JSX-Works.md","lastUpdated":1738215852000}'),e={name:"react/JSX/How-JSX-Works.md"};function p(t,s,r,h,k,E){return i(),n("div",null,s[0]||(s[0]=[l(`<h1 id="how-jsx-works" tabindex="-1">How JSX works <a class="header-anchor" href="#how-jsx-works" aria-label="Permalink to “How JSX works”">​</a></h1><blockquote><p><a href="https://dev.to/taichim/how-jsx-works-46fi" target="_blank" rel="noreferrer">https://dev.to/taichim/how-jsx-works-46fi</a><br> 作者:Taichi Murai<br> 第一次用vsc写md文件,没有预览,跟写代码一样,有点奇怪.<br> 0:00 - 1:01</p></blockquote><hr><h2 id="jsx是什么" tabindex="-1">JSX是什么? <a class="header-anchor" href="#jsx是什么" aria-label="Permalink to “JSX是什么?”">​</a></h2><p><code>JSX(JavaScript Syntax eXtension)</code>是一种语法扩展(不是一种独立的语言!).它允许我们像写HTML一样,编写我们想要的Javascript代码. 它一开始是被Meta研发出来,帮助开发React应用的,不过渐渐的,可能是由于太好用了,其它前端框架也慢慢采用适应了这种语法.</p><h2 id="jsx的好处" tabindex="-1">JSX的好处 <a class="header-anchor" href="#jsx的好处" aria-label="Permalink to “JSX的好处”">​</a></h2><ul><li><code>更高的安全性</code> ...JSX代码会被先编译成JS,后者能够生成移除了可能产生歧义的HTML字符串,像<code>&lt;</code>,<code>&gt;</code>,它们能被利用生成新的元素.而由JS代码生成的HTML串,则会把尖括号用大于小于号取代,从而让代码在这种场景下更加安全(sanitization)</li><li><code>支持基于组件的代码结构</code> ...JSX支持基于组件的代码组织方式.这能让代码更加容易模块化及便于维护.</li></ul><h2 id="jsx的缺点" tabindex="-1">JSX的缺点 <a class="header-anchor" href="#jsx的缺点" aria-label="Permalink to “JSX的缺点”">​</a></h2><ul><li><code>需要使用额外工具</code> ...JSX代码要能被执行,需要使用特定的工具转换成JS代码才能实现.这让开发工具链上又多了一步(真会计较吗?加多个babel依赖就会有大影响吗?).而其它框架,比如Vue.js,可以直接在<code>&lt;script&gt;</code>写代码,直接就在浏览器环境中运行了.</li><li><code>混合带来的烦恼</code> ...有些开发者认为,JSX结合了HTML的语法以及JS逻辑代码,这样反而更难从需要展示的内容,跟内容需要表现的逻辑分开开来了.</li></ul><h2 id="它是如何工作的" tabindex="-1">它是如何工作的 <a class="header-anchor" href="#它是如何工作的" aria-label="Permalink to “它是如何工作的”">​</a></h2><p>JSX代码需要编译器.编译器就是将一些由高级语言编写的源代码,根据一定的规则转换成语法树的一种软件.这个过程包括以下几个步骤:语法分析,解析,语义分析,优化,以及生成代码(lexical analysis -&gt; parse -&gt; semantic analysis -&gt; optimization -&gt; code generation)<br> 而编译器解析时,又有以下三个步骤:</p><h3 id="_1-标记" tabindex="-1">1. 标记 <a class="header-anchor" href="#_1-标记" aria-label="Permalink to “1. 标记”">​</a></h3><p>本质上这个过程是把一串字符串分解成一些有意义的标记.当一个标记器是有状态的,以及每个标记都包含了它父/子标记的状态,那么这个标记器就可以称为一个<code>lexer</code>(双工器?).然后这个lexer就会把一些关键词,跟一些可枚举的值一一对应,怎么对应的,则需要根据这些关键字的具体实现.<br> 举例来说就是,<code>const</code>变成0,<code>let</code>变成1,<code>function</code>变成2,等等等等.</p><h3 id="_2-语法分析" tabindex="-1">2.语法分析 <a class="header-anchor" href="#_2-语法分析" aria-label="Permalink to “2.语法分析”">​</a></h3><p>这是一个处理标记,然后把它们转换成语法树的过程.语法树是一种表现代码结构的数据结构.</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    declarations: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclarator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        init: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Literal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            raw: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kind: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;const&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    declarations: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclarator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        id: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        init: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Literal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            raw: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kind: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;let&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ExpressionStatement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expression: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CallExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        callee: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;console&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        arguments: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BinaryExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            left: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            right: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            operator: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><h3 id="_3-代码生成" tabindex="-1">3.代码生成 <a class="header-anchor" href="#_3-代码生成" aria-label="Permalink to “3.代码生成”">​</a></h3><p>编译器通过<code>抽象语法树(AST,Abstract Syntax Tree)</code>,生成机器可运行的代码.其中包括将AST中的代码,转换成一系列可以直接由处理器执行的指令.而这些最终的指令,就可以被JS引擎执行了.<br> (?所以最终执行的是处理器还是JS引擎?)</p><h2 id="通过jsx扩展js语法" tabindex="-1">通过JSX扩展JS语法 <a class="header-anchor" href="#通过jsx扩展js语法" aria-label="Permalink to “通过JSX扩展JS语法”">​</a></h2><p>为了扩展JS语法,我们需要在它被JS引擎执行前,处理好我们的新语法. 我们要做的是创建属于我们自己的lexer(stateful tokenizer and tokens about parent)和parser(语法分析器).<br> 它需要做到,接收并理解一段代码字符串.然后在它被转换成机器码前,把这颗语法树,先转换成原生的,不含有新语法的JS代码,这样所有JS引擎就都能执行了.而这就是Babel在Javascript生态中的作用,其它需要语法转换的还包括TypeScript,Traceur,swc等等.<br> 这就是为什么JSX不能直接在浏览器中运行,而需要额外一步,利用自定义的语法解析,之后再生成语法树的原因.这些代码之后会转换成原生JS代码,打包成最终可分配(distributable)的包之中.<br> 这叫做<code>transpilation</code>:转变,编译后的过程(transformed -&gt; compiled).</p><h2 id="jsx注解-pragma" tabindex="-1">JSX注解(pragma) <a class="header-anchor" href="#jsx注解-pragma" aria-label="Permalink to “JSX注解(pragma)”">​</a></h2><p>JSX的注解,由小于号&lt;开始,它的单独出现,在JS当中,如果不是用于比较的话,是一个无法辨认的字符.而这个注解,对于编译器来说,是完全不同的意思:它能被理解为函数的调用. 而这个由&lt;调用的函数名字是可配置的.在React中默认是React.createElement,或是_jsxs --一种更新的处理方式.</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>JSX编译过程包括标记化,语法分析,代码生成.<br> 标记化,就是把代码分解成标记.而这些标记则会通过语法分析,转换成语法树.最后,这颗语法树就会被转换成机器码,被JS引擎执行.(一个句号一个阶段)<br> 而如果我们需要利用JSX扩展JS语法,则需要构建我们自己的lexer和parser,把JSX代码转编为(transpile)原生JS代码.而这个过程需要另外的构建步骤,因为JSX是不能直接在浏览器环境所执行的.JSX注解,一般指&lt;字符,会被转编成函数调用,具体的函数可以是React.createElement或者_jsxs.</p>`,24)]))}const b=a(e,[["render",p]]);export{o as __pageData,b as default};
