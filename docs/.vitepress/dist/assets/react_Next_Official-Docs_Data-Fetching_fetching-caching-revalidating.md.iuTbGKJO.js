import{_ as s,c as i,o as a,a3 as e}from"./chunks/framework.D006jthy.js";const E=JSON.parse('{"title":"数据获取,缓存及重校验","description":"","frontmatter":{},"headers":[],"relativePath":"react/Next/Official-Docs/Data-Fetching/fetching-caching-revalidating.md","filePath":"react/Next/Official-Docs/Data-Fetching/fetching-caching-revalidating.md"}'),t={name:"react/Next/Official-Docs/Data-Fetching/fetching-caching-revalidating.md"},n=e(`<h1 id="数据获取-缓存及重校验" tabindex="-1">数据获取,缓存及重校验 <a class="header-anchor" href="#数据获取-缓存及重校验" aria-label="Permalink to &quot;数据获取,缓存及重校验&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>最新的版本已经分解成上面的三章了.官网也找不到了.如果已经读完前面三章,这章可以直接跳过.</p></div><p>数据获取是所有应用的核心部分之一.这篇文章将指导你如何在React和Next应用中,获取/缓存/重校验(revalidate)数据.</p><p>获取数据的方法有四种:</p><ol><li>在服务器端上,用<code>fetch</code></li><li>在服务器端上,用第三方库</li><li>在客户端上,用路由处理器(Route Handler)</li><li>在客户端上,用第三方库.</li></ol><h2 id="在服务器端上用fetch获取数据" tabindex="-1">在服务器端上用<code>fetch</code>获取数据 <a class="header-anchor" href="#在服务器端上用fetch获取数据" aria-label="Permalink to &quot;在服务器端上用\`fetch\`获取数据&quot;">​</a></h2><p>Next将原生的<code>fetch</code>函数扩展了,这样你可以为每个服务器请求自行地配置缓存及重校验行为.React则扩展了<code>fetch</code>,在渲染组件树的同时,自动将fetch请求记忆起来.(memoize)</p><p>你可以在服务器组件,路由处理器及Server Actions(服务器行为?)中,配合<code>async/await</code>使用<code>fetch</code>函数.<br> 举个例子:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这样请求回来的值是 *没有*被序列化的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因此返回的值甚至可以是Date/Map/Set等类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.ok){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里会渲染跟这个页面最接近的错误边界.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to fetch data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>Next提供了一些像<code>cookies</code>和<code>headers</code>这样的工具函数,从而让你在服务器组件中获取数据时,对请求进行一些额外的操作.这也会导致页面会被动态渲染,因为这些操作依赖于请求时的具体信息.</li><li>在路由处理器中,<code>fetch</code>请求不会被记住,因为路由处理器并不是组件树的一部分.</li><li>服务器行为中,<code>fetch</code>请求是不会被缓存的.(默认<code>cache: no-store</code>)</li><li>服务器组件中,要同时使用<code>async/await</code>和Typescript,版本支持至少是:Typescript <code>5.1.3</code>, <code>@type/react 18.2.8</code>.</li></ul></div><h3 id="缓存数据" tabindex="-1">缓存数据 <a class="header-anchor" href="#缓存数据" aria-label="Permalink to &quot;缓存数据&quot;">​</a></h3><p>数据缓存就是将你获取过的数据存储起来,从而不必每次请求的时候都进行重新获取.<br> 默认情况下,Next会自动将<code>fetch</code>返回来的值,缓存到服务器上一个叫<a href="https://nextjs.org/docs/app/building-your-application/caching#data-cache" target="_blank" rel="noreferrer"><code>Data Cache</code>的地方</a>.也就是说,数据可以在打包或请求时获取,它们都会被缓存起来,能重用就重用.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值就是&#39;force-cache&#39;,可以忽略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{ cache: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;force-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>然而,<code>fetch</code>对数据的缓存是有例外的,以下情况就不会缓存:</p><ul><li>在Server Actions里用<code>fetch</code></li><li>在路由处理器中的<code>POST</code>请求</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong><code>Data Cache</code>是什么东西?</strong><br> Data Cache是一种持久的<a href="https://developer.mozilla.org/docs/Web/HTTP/Caching" target="_blank" rel="noreferrer">HTTP缓存</a>.这个缓存可以根据你所在的平台自动扩充,并<a href="https://vercel.com/docs/infrastructure/data-cache" target="_blank" rel="noreferrer">在多个地方(regions)共享</a>.<br><a href="https://nextjs.org/docs/app/building-your-application/caching#data-cache" target="_blank" rel="noreferrer">更多关于Data Cache的信息</a></p></div><h3 id="数据重校验" tabindex="-1">数据重校验 <a class="header-anchor" href="#数据重校验" aria-label="Permalink to &quot;数据重校验&quot;">​</a></h3><p>重校验是删除某个请求在Data Cache里的内容,通过重新获取的方式,取得最新数据的一个过程.这在数据发生变化,需要保证最新数据的场景下有所用处.<br> 对缓存数据进行重校验的方法有两种:</p><ul><li><strong>基于时间的重校验:</strong> 过了一段既定的时间后自动重新校验数据.一般一些不经常改变的,数据实时性没那么重要的数据会采用这种方案.</li><li><strong>按需重校验:</strong> 根据某个事件手动触发重校验(比如表单提交时).按需重校验可以用基于标识(tag-based)或基于路径(path-based)的方法,一次将多组数据进行重校验.这在你需要尽可能快地展示最新数据的场景较为有用(比如无头部内容管理系统(Headless CMS)的内容需要更新)</li></ul><h4 id="基于时间的重校验" tabindex="-1">基于时间的重校验 <a class="header-anchor" href="#基于时间的重校验" aria-label="Permalink to &quot;基于时间的重校验&quot;">​</a></h4><p>你可以在<code>fetch</code>选项的<code>next.revalidate</code>属性上,为数据获取添加一个时间间隔,从而为<code>fetch</code>获取到的数据缓存设置一个生存时间.(?为什么是设置缓存多久而不是多久触发?缓存没了不代表请求会被重新发送吧?)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{ next: { revalidate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要是静态值而不能是evaluated的值, 60 * 60也不可以, 单位是秒</span></span></code></pre></div><p>如果你要重校验一个路由分块内的所有<code>fetch</code>请求,你可以用<a href="https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config" target="_blank" rel="noreferrer">分块配置项(Segment config options)</a></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// layout.js | page.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> revalidate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 至多每小时对整个页面的fetch请求进行重校验操作.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上面是单个fetch层面,这个是整个页面.</span></span></code></pre></div><p>如果一个静态渲染的路由中有多个不同频率重校验的请求,那这些频率之中的最小值则会作为所有请求的重校验时间.(???那我不同频率的设置还有什么用???哦针对的静态渲染路由).<br> 而对于动态渲染的路由,每个请求的重校验都是各自独立的.(关键区别是<strong>静态和动态渲染</strong>)<br><a href="https://nextjs.org/docs/app/building-your-application/caching#time-based-revalidation" target="_blank" rel="noreferrer">更多关于基于时间的重校验</a></p><h4 id="基于需求的重校验" tabindex="-1">基于需求的重校验 <a class="header-anchor" href="#基于需求的重校验" aria-label="Permalink to &quot;基于需求的重校验&quot;">​</a></h4><p>基于需求重校验,就可以根据路径变化<code>revalidatePath</code>,或是Server Actions或路由处理器的缓存标签(revalidateTag)变化,触发重校验.<br> Next.js有一整个缓存系统来避免不同路由间的<code>fetch</code>请求冲突(invalidate fetch).</p><ol><li>你可以在<code>fetch</code>当中,对缓存项打一个或多个标签</li><li>然后你可以调用<code>revalidateTag</code>,对所有打了某个标签的缓存项进行重校验.<br> 比如说,以下的<code>fetch</code>请求则添加了<code>collection</code>这个缓存标签:</li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{ next:{ tags: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;collection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后你可以在Server Action里调用<code>revalidateTag</code>,重新校验这个带有了<code>collection</code>的<code>fetch</code>请求:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use server&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { revalidateTag } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/cache&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    revalidateTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;collection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://nextjs.org/docs/app/building-your-application/caching#on-demand-revalidation" target="_blank" rel="noreferrer">更多关于按需重校验</a></p><h4 id="错误处理及重校验" tabindex="-1">错误处理及重校验 <a class="header-anchor" href="#错误处理及重校验" aria-label="Permalink to &quot;错误处理及重校验&quot;">​</a></h4><p>如果在尝试重校验的时候报错了,那重校验的结果就是缓存中,上一次成功获取的数据.在之后的请求中,Next再重新校验相应数据.(?)</p><h3 id="选择不用数据缓存" tabindex="-1">选择不用数据缓存 <a class="header-anchor" href="#选择不用数据缓存" aria-label="Permalink to &quot;选择不用数据缓存&quot;">​</a></h3><p>以下条件下<code>fetch</code>请求不会被缓存:</p><ul><li><code>fetch</code>配置项设置了<code>cache:no-store</code></li><li><code>fetch</code>请求内部设置了<code>revalidate:0</code></li><li>路由处理器中,用了<code>POST</code>方法的<code>fetch</code></li><li>使用了<code>headers</code>或<code>cookies</code>之后的<code>fetch</code>请求(?这里指工具函数吗?)</li><li>路由分块里,设置了<code>const dynamic = &#39;force-dynamic&#39;</code></li><li>专门设置默认跳过缓存的<code>fetchCache</code>路由分块</li><li>头部包含了<code>Authentication</code>或<code>Cookies</code>,以及组件树以上包含了一个不被缓存的请求的<code>fetch</code>请求.(?这么苛刻)</li></ul><h4 id="针对单独的fetch请求" tabindex="-1">针对单独的<code>fetch</code>请求 <a class="header-anchor" href="#针对单独的fetch请求" aria-label="Permalink to &quot;针对单独的\`fetch\`请求&quot;">​</a></h4><p>在单独的<code>fetch</code>请求中选择不用缓存,可以在<code>fetch</code>的第二个参数里,设置配置项,<code>cache:no-store</code>.这样就能在每次请求中都动态获取数据了.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// layout.js | page.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{ cache: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;no-store&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://nextjs.org/docs/app/api-reference/functions/fetch" target="_blank" rel="noreferrer">更多关于<code>cache</code>选项的可选值</a>(其实就两个,<code>force-cache</code>和<code>no-store</code>)</p><h4 id="针对多个fetch" tabindex="-1">针对多个<code>fetch</code> <a class="header-anchor" href="#针对多个fetch" aria-label="Permalink to &quot;针对多个\`fetch\`&quot;">​</a></h4><p>如果你在路由分块中(布局或页面内)有多个请求都不需要用到缓存,那你可以在路由分块层面进行配置.主要是<code>const fetchCache = auto</code>这个值来控制.<a href="https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config" target="_blank" rel="noreferrer">更多可选的值</a><br> 不过我们还是建议您针对每一个<code>fetch</code>请求,单独地控制其缓存行为.这样能为你提供更加细粒度的请求控制.</p><h2 id="在服务器端上-用第三方库获取数据" tabindex="-1">在服务器端上,用第三方库获取数据 <a class="header-anchor" href="#在服务器端上-用第三方库获取数据" aria-label="Permalink to &quot;在服务器端上,用第三方库获取数据&quot;">​</a></h2><p>如果你用的获取数据的三方库不支持或没有暴露<code>fetch</code>方法,那你可以选择用路由分块的配置项或React提供的<code>cache</code>函数来控制这些请求的缓存和重校验行为.(像数据库,CMS,ORM客户端等三方库)<br> 请求的数据是否被缓存,取决于所在的路由分块是静态渲染还是动态渲染的.如果是静态的(默认情况),那请求的数据就会作为路由的部分内容,被缓存下来并被重校验(?).而要是动态的,那请求的结果则不会被缓存,每次分块渲染时都会重新发起所有数据请求.<br> 你也可以使用实验性API<a href="https://nextjs.org/docs/app/api-reference/functions/unstable_cache" target="_blank" rel="noreferrer"><code>unstable_cache</code></a>来进行更多的控制.</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>以下例子中:</p><ul><li>我们用了React的<code>cache</code>函数来&quot;记忆&quot;数据请求</li><li>路由设置项<code>revalidate</code>的值设为了<code>3600</code>,也就是说对应的布局和页面分块内,数据会被缓存1小时,每小时发起一次数据请求.</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/utils.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { cache } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findUnique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id});  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里的三方库就是数据库操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>尽管<code>getItem</code>被调用了两次,实际只会对数据库进行一次查询.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/item/[id]/layout.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getItem } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/get-item&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> revalidate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/item/[id]/page.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getItem } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/get-item&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> revalidate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="客户端上用路由处理器获取数据" tabindex="-1">客户端上用路由处理器获取数据 <a class="header-anchor" href="#客户端上用路由处理器获取数据" aria-label="Permalink to &quot;客户端上用路由处理器获取数据&quot;">​</a></h2><p>如果你需要在客户端组件上获取数据,那你可以在客户端上调用路由处理器.路由处理器就是用来接收客户端请求,在服务器端上处理请求,再将数据返回给客户端的.如果你不想向客户端暴露像API tokens这样的敏感信息的话我们建议你使用这种办法.<br> 相应的<a href="https://nextjs.org/docs/app/building-your-application/routing/route-handlers" target="_blank" rel="noreferrer">路由处理器获取数据例子可以看看这里</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>服务器组件和路由处理器</strong><br> 服务器组件是直接在服务器端上渲染的,因此,你不必在服务器组件中再调用路由处理器来获取数据.你可以直接在服务器租价中获取数据.</p></div><h2 id="客户端上用三方库获取数据" tabindex="-1">客户端上用三方库获取数据 <a class="header-anchor" href="#客户端上用三方库获取数据" aria-label="Permalink to &quot;客户端上用三方库获取数据&quot;">​</a></h2><p>当然,你还可以在客户端上用三方数据获取库,像<a href="https://swr.vercel.app/" target="_blank" rel="noreferrer">SWR</a>,<a href="https://tanstack.com/query/latest" target="_blank" rel="noreferrer">TanStack Query</a>等等.这些三方库有自己记忆,缓存,重校验请求,及修改数据的方法.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>未来的API:</strong><br><code>use</code>是一个React函数,用来接收并处理由另一个函数返回的promise.目前我们不建议在客户端里,将<code>fetch</code>请求包裹在<code>use</code>函数内,因为这样可能会导致多次重渲染.<a href="https://react.dev/reference/react/use" target="_blank" rel="noreferrer">更多关于<code>use</code>函数的内容可以去React官网看看.</a></p></div>`,58),h=[n];function l(p,k,r,d,c,o){return a(),i("div",null,h)}const y=s(t,[["render",l]]);export{E as __pageData,y as default};
