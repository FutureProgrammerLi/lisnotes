import{_ as s}from"./chunks/route-segments-to-path-segments.DNwUjHMn.js";import{_ as a,c as i,o as e,a3 as t}from"./chunks/framework.D006jthy.js";const n="/assets/defining-routes.BbVNUlYR.jpg",m=JSON.parse('{"title":"路由定义","description":"","frontmatter":{},"headers":[],"relativePath":"react/Next/Official-Docs/Routing/defining-routes.md","filePath":"react/Next/Official-Docs/Routing/defining-routes.md"}'),o={name:"react/Next/Official-Docs/Routing/defining-routes.md"},l=t('<h1 id="路由定义" tabindex="-1">路由定义 <a class="header-anchor" href="#路由定义" aria-label="Permalink to &quot;路由定义&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们建议你先阅读一下<a href="./">路由基础概念</a>,再进行以下阅读.</p></div><p>这篇文章主要是教您在Next应用中,如何进行路由定义以及应该怎样组织.</p><h2 id="创建路由" tabindex="-1">创建路由 <a class="header-anchor" href="#创建路由" aria-label="Permalink to &quot;创建路由&quot;">​</a></h2><p>Next.js的路由系统是基于文件结构的.也就是说,文件夹,文件,即是路由.<br> 每个文件夹代表的,是路由的一个分块,它对应的就是URL中的一个分块.而嵌套路由的创建,就是文件夹和文件之间的相互嵌套. <img src="'+s+'" alt="file-based-router"> 而有点特殊的,<code>page.js</code>文件,则是使对应的路由分块得以公开访问的(通过URL访问到对应的页面). <img src="'+n+`" alt="defining-routes"></p><p>解释一下上图:如果你访问的URL是<code>/dashboard/analytics</code>,那是会访问不到东西的.因为这个URL下并没有对应的<code>page.js</code>文件.你可以把一些组件定义,样式,图片或一些不是用于展示的文件放在这个目录当中.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>.js</code>,<code>.jsx</code>,<code>.tsx</code>后缀的文件,都可以作为特殊用途的文件.(文件特不特殊是由Next决定的,只是它们的后缀可以是这些.之前也解释过.)</p></div><h2 id="构建ui" tabindex="-1">构建UI <a class="header-anchor" href="#构建ui" aria-label="Permalink to &quot;构建UI&quot;">​</a></h2><p>一些特殊命名的文件,一般就是用来搭建UI的,它们决定用户访问对应URL时展示什么内容.其中最为普遍的一个特殊命名文件,当<code>pages.js</code>和<code>layout.js</code>莫属.它们决定着URL独特的UI展示及整个子路由下的布局应该是怎么样的.<br> 举例说,在<code>app</code>目录下创建个<code>page.js</code>,在其中导出一个React组件:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, Next.js&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>之后的,是要学习创建页面和布局.</p>`,12),p=[l];function c(d,r,h,k,g,u){return e(),i("div",null,p)}const E=a(o,[["render",c]]);export{m as __pageData,E as default};
