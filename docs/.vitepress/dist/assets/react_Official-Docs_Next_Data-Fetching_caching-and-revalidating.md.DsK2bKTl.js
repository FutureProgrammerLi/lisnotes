import{_ as a}from"./app.CqBvROaR.js";import{c as i,o as n,ab as e}from"./chunks/vendor.cEhGAX-6.js";const g=JSON.parse('{"title":"缓存和重校验","description":"","frontmatter":{},"headers":[],"relativePath":"react/Official-Docs/Next/Data-Fetching/caching-and-revalidating.md","filePath":"react/Official-Docs/Next/Data-Fetching/caching-and-revalidating.md","lastUpdated":1738226181000}'),l={name:"react/Official-Docs/Next/Data-Fetching/caching-and-revalidating.md"};function p(t,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="缓存和重校验" tabindex="-1">缓存和重校验 <a class="header-anchor" href="#缓存和重校验" aria-label="Permalink to “缓存和重校验”">​</a></h1><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to “缓存”">​</a></h2><p>缓存就是将数据存储起来,以此减少向服务器发送请求的次数.<br> Next为您提供内置的数据缓存,单独地将请求缓存起来,给予你更细颗粒度的缓存行为控制.</p><h3 id="fetch请求" tabindex="-1"><code>fetch</code>请求 <a class="header-anchor" href="#fetch请求" aria-label="Permalink to “fetch请求”">​</a></h3><p>Next v15<strong>默认不会缓存</strong><code>fetch</code>请求.<br> 要为单个请求设置缓存,你需要添加配置项:<code>cache:&#39;force-cache&#39;</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{cache:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;force-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="数据请求库和orms" tabindex="-1">数据请求库和ORMs <a class="header-anchor" href="#数据请求库和orms" aria-label="Permalink to “数据请求库和ORMs”">​</a></h3><p>你可以使用<code>unstable_cache</code>这个API,为某个特定的请求设置缓存:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getUser } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./data&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { unstable_cache } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/cache&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getCachedUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unstable_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id),[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-app-user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//? 第二个参数是什么?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCachedUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userID);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="重校验数据" tabindex="-1">重校验数据 <a class="header-anchor" href="#重校验数据" aria-label="Permalink to “重校验数据”">​</a></h2><p>重校验是清除数据缓存处(DataCache,是Next内部专门缓存的地方),重新获取最新数据的一个过程.这样做既能确保数据变化后页面能展示这些最新的数据,也能享受静态渲染的快速.<br> 缓存数据的重校验有两种方式:</p><ul><li><strong>基于时间的重校验:</strong> 过了一段既定的时间后自动重新校验数据.一般一些不经常改变的,数据实时性没那么重要的数据会采用这种方案.</li><li><strong>按需重校验:</strong> 根据某个事件手动触发重校验(比如表单提交时).按需重校验可以用基于标识(tag-based)或基于路径(path-based)的方法,一次将多组数据进行重校验.这在你需要尽可能快地展示最新数据的场景较为有用(比如无头部内容管理系统(Headless CMS)的内容需要更新)</li></ul><h3 id="基于时间的重校验" tabindex="-1">基于时间的重校验 <a class="header-anchor" href="#基于时间的重校验" aria-label="Permalink to “基于时间的重校验”">​</a></h3><p>你可以在<code>fetch</code>选项的<code>next.revalidate</code>属性上,为数据获取添加一个时间间隔,从而为<code>fetch</code>获取到的数据缓存设置一个生存时间.</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{ next: { revalidate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要是静态值而不能是evaluated的值, 60 * 60也不可以, 单位是秒</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果你要重校验一个路由分块内的所有<code>fetch</code>请求,你可以用<a href="https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config" target="_blank" rel="noreferrer">分块配置项(Segment config options)</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// layout.js | page.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> revalidate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 至多每小时对整个页面的fetch请求进行重校验操作.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上面是单个fetch层面,这个是整个页面.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="https://nextjs.org/docs/app/building-your-application/caching#revalidating-1" target="_blank" rel="noreferrer">看看基于时间的重校验是如何实现的</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>如果<strong>静态路由</strong>中有多个<code>fetch</code>请求,每一个内部都有不同的重校验频率,那它们之间的<strong>最小值</strong>会作为重校验的时间.</li><li><strong>动态路由</strong>的话,每个请求的频率就是自己的频率,不用顾虑其它路由的重校验频率.</li><li>为了节省服务器资源,我们建议您尽可能地设置一个较大的重校验时间间隔.比如1小时重校验1次,而不是1秒1重验.如果你需要实时的数据的话,试试<a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-rendering" target="_blank" rel="noreferrer">动态渲染</a>,或是客户端数据获取(?).</li></ul></div><h3 id="基于需求的重校验" tabindex="-1">基于需求的重校验 <a class="header-anchor" href="#基于需求的重校验" aria-label="Permalink to “基于需求的重校验”">​</a></h3><p>基于需求的重校验可以通过<code>revalidatePath</code>和<code>revalidateTag</code>这两个API实现.<br> 在服务器行为或路由处理器中,用<code>revalidatePath</code>为特定路由实现数据重校验:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { revalidatePath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/cache&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 一系列数据操作...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    revalidatePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/posts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你也可以用<code>revalidateTag</code>,为各个路由不同的<code>fetch</code>请求实现数据重校验.</p><ol><li>你可以在<code>fetch</code>请求的配置项中设置一或多个缓存标签.</li><li>然后,你可以通过调用<code>revalidateTag</code>函数,对打了特定标签的请求实现重校验.(?重新触发带了tag的个别请求?)<br> 比如下面的<code>fetch</code>请求就被打上了<code>collection</code>缓存标签:</li></ol><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        next:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tags:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;collection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>之后你就可以在其它地方,调用<code>revalidateTag</code>触发这个带了<code>coleection</code>标签的请求了.</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/actions/ts</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use server&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { revalidateTag } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/cache&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    revalidateTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;collection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a href="https://nextjs.org/docs/app/building-your-application/caching#on-demand-revalidation" target="_blank" rel="noreferrer">看看基于需求的重校验是如何实现的</a></p><h3 id="错误处理与重校验" tabindex="-1">错误处理与重校验 <a class="header-anchor" href="#错误处理与重校验" aria-label="Permalink to “错误处理与重校验”">​</a></h3><p>如果在尝试重校验的时候报错了,那重校验的结果就是缓存中,上一次成功获取的数据.在之后的请求中,Next再重新尝试校验相应数据.(?)</p>`,30)]))}const E=a(l,[["render",p]]);export{g as __pageData,E as default};
