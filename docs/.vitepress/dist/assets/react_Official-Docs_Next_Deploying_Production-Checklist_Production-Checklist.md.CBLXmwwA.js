import{_ as r}from"./app.4twKycbs.js";import{c as a,o as t,ab as i}from"./chunks/vendor.cEhGAX-6.js";const u=JSON.parse('{"title":"部署前后的一些准备","description":"","frontmatter":{},"headers":[],"relativePath":"react/Official-Docs/Next/Deploying/Production-Checklist/Production-Checklist.md","filePath":"react/Official-Docs/Next/Deploying/Production-Checklist/Production-Checklist.md","lastUpdated":1738226181000}'),n={name:"react/Official-Docs/Next/Deploying/Production-Checklist/Production-Checklist.md"};function o(l,e,s,p,c,d){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="部署前后的一些准备" tabindex="-1">部署前后的一些准备 <a class="header-anchor" href="#部署前后的一些准备" aria-label="Permalink to “部署前后的一些准备”">​</a></h1><blockquote><p><a href="https://nextjs.org/docs/app/building-your-application/deploying/production-checklist" target="_blank" rel="noreferrer">原文地址</a><br> 为什么想翻这篇? 是想了解如何运用Next,从构建项目开始,到开发,到后期部署.我们需要做些什么,Next为我们做了什么.<br> 算是一个开发完整流程的了解.</p></blockquote><p>在将Next.js应用发布到生产环境时,我们需要实现一些优化操作,遵循一些模式,从而提升用户体验,应用性能及提高应用安全性.</p><h2 id="自动优化" tabindex="-1">自动优化 <a class="header-anchor" href="#自动优化" aria-label="Permalink to “自动优化”">​</a></h2><p>以下优化操作是Next.js自动完成的,你不需手动配置:</p><ul><li><a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components" target="_blank" rel="noreferrer">服务器组件</a>: Next v15开始默认启用服务器组件.服务器组件是在服务器上运行的,无需等待JS代码在客户端上执行渲染.这样它们的存在就能减少客户端JS包的体积.当然,你也可以按需启用<a href="https://nextjs.org/docs/app/building-your-application/rendering/client-components" target="_blank" rel="noreferrer">客户端组件</a>来实现交互.</li><li><a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works" target="_blank" rel="noreferrer">代码分割</a>: Next.js会自动按路由分块为单位,把代码分割成多个文件.你也可以采用<a href="https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading" target="_blank" rel="noreferrer">懒加载</a>客户端组件,或是三方库实现代码分割.</li><li><a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching" target="_blank" rel="noreferrer">预获取</a>: 当路由上的链接进入到用户的视窗时,Next会在后台预获取该路由.从而在用户点击链接时,能快速响应.你也可以手动禁用掉这个功能.</li><li><a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components#static-rendering-default" target="_blank" rel="noreferrer">静态渲染</a>: Next会在构建时,在服务器上静态渲染服务器组件和客户端组件,并对渲染结果进行缓存,从而提升应用性能.你也可以为特定用户设置<a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-rendering" target="_blank" rel="noreferrer">动态渲染</a></li><li><a href="https://nextjs.org/docs/app/building-your-application/caching" target="_blank" rel="noreferrer">缓存</a>: Next会对数据请求,组件渲染结果,静态资源等等都进行缓存,从而减少发送到服务器,数据库,后端服务的请求数量.如果需要,你可以手动取消这些缓存功能.</li></ul><p>以上的默认行为都是为了提升您的应用性能,减少每次网络请求所需要传送的数据量及代价.</p><h2 id="开发阶段" tabindex="-1">开发阶段 <a class="header-anchor" href="#开发阶段" aria-label="Permalink to “开发阶段”">​</a></h2><p>开发阶段,我们建议您使用Next提供的以下特性,以确保最佳的性能表现及用户体验:</p><h3 id="路由及渲染" tabindex="-1">路由及渲染 <a class="header-anchor" href="#路由及渲染" aria-label="Permalink to “路由及渲染”">​</a></h3><ul><li><a href="https://nextjs.org/docs/app/building-your-application/routing/layouts-and-templates#layouts" target="_blank" rel="noreferrer">布局文件</a>: 使用布局文件创建共享的UI组件,并启用导航时的<a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering" target="_blank" rel="noreferrer">部分渲染功能</a></li><li><a href="https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component" target="_blank" rel="noreferrer"><code>&lt;Link&gt;</code>组件</a>: 利用<code>&lt;Link&gt;</code>组件实现客户端导航并预获取路由内容.</li><li><a href="https://nextjs.org/docs/app/building-your-application/routing/error-handling" target="_blank" rel="noreferrer">错误处理</a>: 通过创建自定义的出错展示页面,优雅地处理生产环境中可能会出现的<a href="https://nextjs.org/docs/app/building-your-application/routing/error-handling" target="_blank" rel="noreferrer">各种错误</a>,及<a href="https://nextjs.org/docs/app/api-reference/file-conventions/not-found" target="_blank" rel="noreferrer">路由访问错误404</a>.</li><li><a href="https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns" target="_blank" rel="noreferrer">复合模式</a>: 遵顼我们推荐的,服务器组件和客户端组件的复合模式,并检查<code>&quot;use client&quot;</code>指令的边界,可以有效减少客户端JS包的体积.</li><li><a href="https://nextjs.org/docs/app/building-your-application/rendering/server-components#dynamic-apis" target="_blank" rel="noreferrer">动态APIs</a>: 小心使用了像<code>cookies</code>方法和<code>searchParams</code>属性这些动态API的时候,它们的存在会把该路由变更为动态渲染.(甚者你在根布局文件下使用的话,整个应用都变成动态渲染的了).使用动态API时,合理放置使用它们的位置,限制它们影响的范围,需要时把它们包裹到<code>&lt;Suspense&gt;</code>中,都是非常有必要的.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://nextjs.org/blog/next-14#partial-prerendering-preview" target="_blank" rel="noreferrer">部分预渲染</a>可以使路由的某些部分变为动态渲染,而不是将整个路由都变为动态渲染.</p></div><h3 id="数据获取与缓存" tabindex="-1">数据获取与缓存 <a class="header-anchor" href="#数据获取与缓存" aria-label="Permalink to “数据获取与缓存”">​</a></h3><ul><li>服务器组件: 利用好服务器组件可以直接从服务器上获取数据这个优势.</li><li><a href="https://nextjs.org/docs/app/building-your-application/routing/route-handlers" target="_blank" rel="noreferrer">路由处理器</a>: 客户端组件可以利用路由处理其访问后端资源.不过,不要在服务器组件里使用路由处理器,避免额外的服务器请求.</li><li><a href="https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming" target="_blank" rel="noreferrer">流式渲染</a>: 利用loading UI和<code>&lt;Suspense&gt;</code>,渐进式地将页面内容从服务器传送到客户端,这样也能避免数据获取与页面渲染进程发生冲突.</li><li><a href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching#parallel-and-sequential-data-fetching" target="_blank" rel="noreferrer">平行的数据获取</a>: 合适利用平行获取数据可以减少网络流水.当然也可以考虑使用<a href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching#preloading-data" target="_blank" rel="noreferrer">数据预加载</a>功能.</li><li><a href="https://nextjs.org/docs/app/building-your-application/caching#data-cache" target="_blank" rel="noreferrer">数据缓存</a>: 确保一下你的数据请求结果是否需要缓存.确保那些没有采用<code>fetch</code>方法请求获得的数据是否会被缓存下来.</li><li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/static-assets" target="_blank" rel="noreferrer">静态图片</a>: 利用<code>public</code>目录,自动对应用的静态资源进行缓存.(比如图片)</li></ul><h3 id="界面及可访问性" tabindex="-1">界面及可访问性 <a class="header-anchor" href="#界面及可访问性" aria-label="Permalink to “界面及可访问性”">​</a></h3><ul><li><a href="https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms" target="_blank" rel="noreferrer">表格与校验</a>:利用Server Actions来实现表单提交处理,服务器端校验,及后续错误提示.</li><li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/fonts" target="_blank" rel="noreferrer">字体模块</a>: Next提供的字体模块,可以把字体文件跟其它静态资源一样被处理,并移除字体资源的外部网络请求,减少字体变化导致的布局切换.</li><li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/images" target="_blank" rel="noreferrer"><code>&lt;Image&gt;</code>组件</a>: 你可以使用<code>&lt;Image&gt;</code>组件,自动优化图片资源,放置布局切换,并以WebP或AVIF格式输出.</li><li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/scripts" target="_blank" rel="noreferrer"><code>Script</code>组件</a>: 使用<code>&lt;Script&gt;</code>组件来优化加载三方脚本.它会自动延迟scripts的执行,防止它们阻塞主线程.</li><li><a href="https://nextjs.org/docs/architecture/accessibility#linting" target="_blank" rel="noreferrer">ESLint</a>: 使用内置的<code>eslint-plugin-jsx-ally</code>插件,尽早捕获并修正网页访问性的问题.</li></ul><h3 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to “安全性”">​</a></h3><ul><li><a href="https://nextjs.org/docs/app/building-your-application/data-fetching/fetching#preventing-sensitive-data-from-being-exposed-to-the-client" target="_blank" rel="noreferrer">数据污染Tainting</a>: 通过对传输数据对象或某些值进行&quot;污染&quot;,来防止敏感数据暴露给客户端.</li><li><a href="https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#authentication-and-authorization" target="_blank" rel="noreferrer">Server Actions</a>: 确保可以调用Server Actions的用户是经过授权的.具体可以参考<a href="https://nextjs.org/blog/security-nextjs-server-components-actions" target="_blank" rel="noreferrer">关于安全性的实践建议</a></li><li><a href="https://nextjs.org/docs/app/building-your-application/configuring/environment-variables" target="_blank" rel="noreferrer">环境变量</a>: 确保你所有的环境变量文件<code>.env.*</code>都添加到了<code>.gitignore</code>文件中.并遵循只有公开的公共变量,前缀为<code>NEXT_PUBLIC_</code>的命名规范.</li><li><a href="https://nextjs.org/docs/app/building-your-application/configuring/content-security-policy" target="_blank" rel="noreferrer">内容安全策略</a>: 为防止应用被像XSS,clickjacking,及各种代码注入的攻击,你可以为应用设置内容安全策略.</li></ul><h3 id="元数据及seo" tabindex="-1">元数据及SEO <a class="header-anchor" href="#元数据及seo" aria-label="Permalink to “元数据及SEO”">​</a></h3><ul><li><a href="https://nextjs.org/docs/app/building-your-application/optimizing/metadata" target="_blank" rel="noreferrer">元数据API</a>: 合理利用Next为您提供的各种元数据API,如为页面添加titles,descriptions及其它元数据,从而提升应用的SEO.</li><li><a href="https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image" target="_blank" rel="noreferrer">Open Graph(OG)图片</a>: 为应用创建OG图片,以应对社交分享场景.(?我在说什么, for social sharing)</li><li><a href="https://nextjs.org/docs/app/api-reference/functions/generate-sitemaps" target="_blank" rel="noreferrer">Sitemaps</a>和<a href="https://nextjs.org/docs/app/api-reference/file-conventions/metadata/robots" target="_blank" rel="noreferrer">Robots</a>: 通过为应用生成sitemaps和robots文件,帮助搜索引擎更好地爬取并索引您的网页内容.</li></ul><h3 id="类型安全" tabindex="-1">类型安全 <a class="header-anchor" href="#类型安全" aria-label="Permalink to “类型安全”">​</a></h3><ul><li>Typescript和<a href="https://nextjs.org/docs/app/api-reference/config/typescript" target="_blank" rel="noreferrer">TS 插件</a>: 使用Typescript和TS插件,编写类型安全的代码,及早捕获错误.</li></ul><h2 id="发布到生产阶段之前" tabindex="-1">发布到生产阶段之前 <a class="header-anchor" href="#发布到生产阶段之前" aria-label="Permalink to “发布到生产阶段之前”">​</a></h2><p>发布前,你可以本地使用<code>next build</code>命令,本地构建应用,捕获任意可能的错误,然后用<code>next start</code>命令,对应用在&quot;类生产&quot;环境下的性能表现进行评估.</p><h3 id="核心web-vitals" tabindex="-1">核心Web-vitals <a class="header-anchor" href="#核心web-vitals" aria-label="Permalink to “核心Web-vitals”">​</a></h3><ul><li><a href="https://developers.google.com/web/tools/lighthouse" target="_blank" rel="noreferrer">Lighthouse</a>: 使用lighthouse工具,更好地理解你自己开发的应用体验,并发现可以提升的地方.这只是一个对实际环境的模拟测试,你应该注重的点是工具提供的,关于页面的核心性能数据.(比如Web-vitals)</li><li><a href="https://nextjs.org/docs/app/api-reference/functions/use-report-web-vitals" target="_blank" rel="noreferrer"><code>useReportWebVitals</code> hook</a>: 利用这个hook,把Core Web Vitals性能数据发送到分析工具/网站去.</li></ul><h3 id="打包分析" tabindex="-1">打包分析 <a class="header-anchor" href="#打包分析" aria-label="Permalink to “打包分析”">​</a></h3><p>使用<code>@next/bundle-analyzer</code>插件,可以分析打包后的JS体积,分辨项目内存在的,可能影响应用性能的大体积模块和依赖.<br> 此外,以下插件可以帮助你新依赖添加时对应用的影响:</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost" target="_blank" rel="noreferrer">Import Cost</a></li><li><a href="https://packagephobia.com/" target="_blank" rel="noreferrer">Package Phobia</a></li><li><a href="https://bundlephobia.com/" target="_blank" rel="noreferrer">Bundle phobia</a></li><li><a href="https://bundlejs.com/" target="_blank" rel="noreferrer">bundlejs</a></li></ul><h2 id="部署之后" tabindex="-1">部署之后 <a class="header-anchor" href="#部署之后" aria-label="Permalink to “部署之后”">​</a></h2><p>部署之后,你可以根据你具体部署的服务器,利用起它为我们提供的功能,更好地监控应用运行情况及应用性能表现.</p><p>如果你部署到了Vercel上,我们建议您使用以下功能:</p><ul><li><a href="https://vercel.com/analytics?utm_source=next-site&amp;utm_campaign=nextjs-docs&amp;utm_medium=docs" target="_blank" rel="noreferrer">数据分析</a>: 内置的数据分析工具,包括访客数,页面查看率等其它相关数据.</li><li><a href="https://vercel.com/docs/speed-insights?utm_source=next-site&amp;utm_campaign=nextjs-docs&amp;utm_medium=docs" target="_blank" rel="noreferrer">速度分析</a>: 基于访客数据的,应用真实性能表现.从而让你知道应用实际表现情况.</li><li><a href="https://vercel.com/docs/observability/runtime-logs?utm_source=next-site&amp;utm_campaign=nextjs-docs&amp;utm_medium=docs" target="_blank" rel="noreferrer">日志记录</a>: 运行时及活动日志的存在,可以让你调试或监控生产环境中的应用.或者你还可以利用<a href="https://vercel.com/integrations?utm_source=next-site&amp;utm_campaign=nextjs-docs&amp;utm_medium=docs" target="_blank" rel="noreferrer">这里提供的一系列三方库工具和服务</a>来记录应用运行情况.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>部署到Vercel的最佳实践,可以参考<a href="https://vercel.com/docs/production-checklist?utm_source=next-site&amp;utm_campaign=nextjs-docs&amp;utm_medium=docs" target="_blank" rel="noreferrer">Vercel官方提供的指引</a></p></div><p>如果你能遵循以上这些最佳实践,你就能构建出更快,更可靠,更安全的Next.js应用.</p><hr><p>感谢你能看到这里!</p>',37)]))}const f=r(n,[["render",o]]);export{u as __pageData,f as default};
