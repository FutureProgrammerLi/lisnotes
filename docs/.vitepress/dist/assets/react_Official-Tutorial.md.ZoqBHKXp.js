import{_ as i}from"./app.N89AeAOp.js";import{c as a,Y as n,o as l}from"./chunks/vendor.CNpqrdog.js";const g=JSON.parse('{"title":"自己官方教程的学习过程","description":"","frontmatter":{},"headers":[],"relativePath":"react/Official-Tutorial.md","filePath":"react/Official-Tutorial.md","lastUpdated":1738226181000}'),e={name:"react/Official-Tutorial.md"};function p(t,s,h,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="自己官方教程的学习过程" tabindex="-1">自己官方教程的学习过程 <a class="header-anchor" href="#自己官方教程的学习过程" aria-label="Permalink to &quot;自己官方教程的学习过程&quot;">​</a></h1><blockquote><p><a href="https://nextjs.org/learn/dashboard-app" target="_blank" rel="noreferrer">https://nextjs.org/learn/dashboard-app</a><br> 目前看了前两章,比较有趣.是通过项目学习的过程.仅以此记录自己的学习过程.<br> (github阿github为什么总出错,push自己的项目时出错,clone官方例子的时候又出错.重复执行你给我不同的结果?有时成功有时不成功?)</p></blockquote><ul><li>File Structure</li><li>Styling and static assets</li><li>Route: layouts and pages / navigation</li><li>Data: database / fetching data</li></ul><h2 id="app-file-structure" tabindex="-1">App file structure <a class="header-anchor" href="#app-file-structure" aria-label="Permalink to &quot;App file structure&quot;">​</a></h2><p>官方的例子给我们介绍了,用Next构建应用时的文件目录可以如何组织,把哪些内容放到哪些文件夹内.可以参考.</p><ul><li><code>/app</code>: <strong>路由,组件,逻辑文件.</strong> 是大部分编写代码的地方,可以看做Vite的src目录</li><li><code>app/lib</code>: libraries,一般把一些工具类的东西放这里,像<strong>工具函数,可重用逻辑,数据获取</strong>等等实用类内容.</li><li><code>/app/ui</code>: UserInterface, <strong>组件</strong>放这,类似<code>/src/components/</code>,一般global reusable建议放这,不然我觉得还是按local reuseable components那样,仅放在那个路由使用到的文件夹中更好,可重用性比较低的组件不太需要放在这.官方举例的是<code>cards,tables,forms</code>这些重用性可能比较高的组件.</li><li><code>/public</code>: <strong>静态资源</strong>放这,像图片这些.</li><li><code>/scripts</code>: <strong>操作数据库相关的文件</strong>.例子中都是sql相关的JS函数.(用JS操作SQL,类似express里的app.js)</li><li><strong>配置文件</strong>: 顾名思义,有<code>.config</code>后缀的文件.例子中包括了两个在最外层:<code>next.config.ts</code>和<code>tailwind.config.ts</code>,对应的next本身和tailwindcss.</li></ul><h2 id="placeholder-for-data" tabindex="-1">Placeholder for data <a class="header-anchor" href="#placeholder-for-data" aria-label="Permalink to &quot;Placeholder for data&quot;">​</a></h2><p>不是每次操作都要直接跟数据库交互的,这样很麻烦且很浪费时间.<br> 所以开发时还是建议<em>mock</em>,用模拟器,或本地假数据,先本地走通流程.<br> 在官方这个例子里,本地假数据放在了<code>/app/lib/placehoder-data.js</code>.</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> invoices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customer_id: customers[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15795</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pending&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    date: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2022-12-06&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customer_id: customers[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20348</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pending&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    date: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2022-11-14&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>/app/lib</code>里面还有个<code>definition.ts</code>,用来定义你需要的数据类型,避免把错误类型的数据传给组件,或是从数据库接收到,不一样类型的数据.(很有必要,<strong>是双向的避免错误</strong>,如果要额外处理,另说.)<br> 或许不用手动定义,可以用<code>Prisma</code>根据数据库的Schema生成数据类型.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Invoice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  customer_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // In TypeScript, this is called a string union type.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // It means that the &quot;status&quot; property can only be one of the two strings: &#39;pending&#39; or &#39;paid&#39;.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pending&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;paid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="styling" tabindex="-1">Styling <a class="header-anchor" href="#styling" aria-label="Permalink to &quot;Styling&quot;">​</a></h2><ul><li>TailwindCSS</li><li>CSS-modules</li><li>Others like clsx, Sass, styled-jsx,styled-components, emotion.</li></ul><h3 id="tailwindcss" tabindex="-1">TailwindCSS <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;TailwindCSS&quot;">​</a></h3><p>Next目录结构中,<code>/app/ui</code>下有个<code>global.css</code>的文件,里面包含了tailwind的那三条@tailwind指令以及一些CSS.<br><strong>要在<code>/app/layout</code>里<code>import &#39;@/app/ui/global.css;&#39;</code>,你才能用到tailwindCSS的内容</strong><br> 是否相当于Vite config里的content?这里就是整个应用的入口?是否还有其它入口可配置项? <em><code>/app/layout</code>是整个项目的root layout.</em></p><h3 id="css-modules" tabindex="-1">CSS-modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS-modules&quot;">​</a></h3><p>用<code>create-next-app</code>创建项目时会问你需不需要tailwindcss,所以可以说是默认项了.<br> 更默认的,直接没问你是不是用,用就是支持,<strong>CSS-modules</strong>.(甚至找到<a href="https://zhuanlan.zhihu.com/p/405198686" target="_blank" rel="noreferrer">怎么才能禁用它的</a>)23333<br> 要用CSS-modules,三步:</p><ul><li>另外建立xxx.module.css文件,在里面编写自己的样式(建议还是抽离出来比较好)</li><li>在需要的页面\`import styles from &#39;@/app/ui/xxx.module.css;&#39;</li><li>在元素上添加类:<code>&lt;div className={styles.xxx}&gt;</code></li></ul><h3 id="clsx-others" tabindex="-1">clsx &amp; others <a class="header-anchor" href="#clsx-others" aria-label="Permalink to &quot;clsx &amp; others&quot;">​</a></h3><p>额外说的clsx,用于根据条件切换样式,个人感觉为了方便,有没必要额外引库看实际.</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clsx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;clsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clsx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;inline-flex items-center rounded-full px-2 py-1 text-sm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;bg-gray-100 text-gray-500&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pending&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;bg-green-500 text-white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;paid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>大概能看出来,根据status的值,适用<code>bg-gray-100 text-gray-500</code>或者<code>bg-green-500 text-white</code>这两个类.</p><h3 id="fonts-and-images" tabindex="-1">Fonts and Images <a class="header-anchor" href="#fonts-and-images" aria-label="Permalink to &quot;Fonts and Images&quot;">​</a></h3><ul><li>怎么全局改字体?</li><li>图片为什么要用<code>&lt;Image/&gt;</code>组件,而不是本身的<image></image>就可以了?它为我们做了什么?</li></ul><blockquote><p>怎么全局改字体?</p></blockquote><ol><li>在<code>/app/ui</code>下面创建个font.tsx文件,在里面导出你想用的字体.</li></ol><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Inter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/font/google&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是google库里的一种字体,直接导就行,不用安装</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Inter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ subsets: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;latin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里的subsets是必须的,是fallback.Inter应用不了就用latin.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其它字体可能还会有其它额外的必须配置,比如secondaryFonts例子的Lusitana,除了subsets还要weight,值还限定&#39;400&#39;| &#39;700&#39;,还限定是字符串.(???)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>在全局的layout里面,你猜猜是哪个文件,应用到那个入口文件里.(答案在下面)</li></ol><ul><li>hint: 跟刚开始使用tailwindcss时相同,你曾经在这导入过全局样式.</li></ul><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {inter} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/app/ui/fonts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">className</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} antialiased\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}&gt;{children}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 这里的antialiased不是必要的 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>答案揭晓:这个全局入口是<code>/app/layout.tsx</code></strong></p><blockquote><p>图片为什么要用<code>&lt;Image/&gt;</code>组件,而不是本身的<code>&lt;image/&gt;</code>就可以了?它为我们做了什么?</p></blockquote><p>四个原因:</p><ul><li>防止图片死板不响应</li><li>可以设置根据不同设备显示不同大小,(?image不也可以)</li><li>防止加载图片时导致布局发生变化</li><li><strong>自带懒加载</strong>(算是我唯一一个记得住的好处了)</li></ul><blockquote><p>怎么用?</p></blockquote><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden md:block&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//src和alt是必须填的,其它根据需要设置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="layout-pages-routing" tabindex="-1">Layout &amp; Pages / Routing <a class="header-anchor" href="#layout-pages-routing" aria-label="Permalink to &quot;Layout &amp; Pages / Routing&quot;">​</a></h2><p>基于文件系统的路由应该不用多介绍了.<br> 简单说就是:文件名就是路径名,文件夹嵌套就是路径嵌套.<br><strong>page.tsx</strong> 就是 当前路径下要显示的东西.</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>app</span></span>
<span class="line"><span>├─ dashboard</span></span>
<span class="line"><span>│  ├─ page.tsx</span></span>
<span class="line"><span>│  └─ layout.tsx</span></span>
<span class="line"><span>├─ page.tsx</span></span>
<span class="line"><span>└─ layout.tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里就解释了:为什么在<code>app/layout.tsx</code>里引入<code>global.css</code>以及<code>Inter font</code>,因为它们就是<strong>整个应用的入口</strong>.(Page是真正的入口,但layout包括了page)</p><p>你猜上面的目录结构,url要样才能访问到<code>/app/dashboard/page.tsx</code>?很容易吧.<code>localhost:3000/dashboard</code></p><hr><p>知道文件怎么组织之后,就要学怎么在这些页面中跳转了.</p><blockquote><ol><li><code>&lt;Link/&gt;</code>和原生的<code>&lt;a&gt;</code>有什么区别?为什么要用它给的?</li></ol></blockquote><p>区别就是<strong>后者原生会整个页面刷新,前者只会刷新部分路由</strong>.(without seeing a full refresh)<br> 这是肉眼可见的,底层实现是因为Link实现了<code>Code Spliting</code>,每个路由下的页面都是独立分开的,要更新也只是更新了对应部分的page.<br> 而且,<code>&lt;Link/&gt;</code> 还会在该组件出现到用户浏览器视口时,自动在后台预获取目标路由的代码,这样就提升了路由跳转的效率了.</p><ul><li>防止整面刷新,实现局部更新;</li><li>code spliting实现的,预获取目标路由代码,提高页面跳转效率;</li></ul><blockquote><ol start="2"><li><code>&lt;NavLink/&gt;</code>有什么用? 怎么用?</li></ol></blockquote><p><strong>配合<code>usePathname()</code>,实现用户当前所在路由的提示.(提示用户当前在哪个路由页面,&quot;高亮&quot;);</strong></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>由于这两个的使用,是在客户端发生的.工作过程中需要获取客户端当前URL才能实现,因此,要添加<code>&#39;use client&#39;</code>在当前组件最开头.</p></div><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use client&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {usePathname} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next/navigation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NavLinks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pathname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> usePathname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>之后,可以使用之前的<code>clsx</code>,根据当前路由进行样式匹配. <code>pathname === link.href</code></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clsx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;clsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{link.name}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{link.href}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clsx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 texfont-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start mdmd:px-3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;bg-sky-100 text-blue-600&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: pathname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> link.href,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="data-fetching-and-populate" tabindex="-1">Data (Fetching and Populate) <a class="header-anchor" href="#data-fetching-and-populate" aria-label="Permalink to &quot;Data (Fetching and Populate)&quot;">​</a></h2><p>抽象起来了,要部署了,用起数据库了;给的东西太多,自己的东西少起来了.<br> 用的Vercel部署和Postgres数据库.<br> 用Vercel部署就不多说了,注册,链接github,deploy.<br> 用的Postgres数据库也不说了,甚至它都帮你把数据都填好到数据库里面了.<br> 怎么填的数据库,用了<code>scripts/seed.js</code>里的,多一条命令,在package.json里的scripts加上就能执行了,具体干了什么我也看不懂.</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//package.json</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;seed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node -r dotenv/config ./scripts/seed.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p><strong>获取数据的几种方法</strong>:</p><ul><li><em>API层:</em> 第三方服务提供的API;给客户端用的,由服务器端提供的接口.Next.js里,你可以用<a href="https://nextjs.org/docs/app/building-your-application/routing/route-handlers" target="_blank" rel="noreferrer">Route Handlers</a>. (就是自带的路由切换时的方法,GET/POST/DELETE等等这些)</li><li><em>数据库查询:</em> API层逻辑不够写,把操作扔给数据库自身,搞定了再给我返回来我想要的.</li><li><em>服务器端组件:</em> 直接在写组件的时候就用<code>async await</code>语法来fetch,就不用再费劲嵌套到<code>useEffect</code>里或者用其它的获取数据的库了.</li><li><em>SQL查询:</em> 用<code>import sql from &#39;@vercel/postgres&#39;;</code>这个函数,你甚至可以直接在js文件里写SQL语句,直接把数据库操作完获得的数据返回给需要的地方.<code>app/lib/data.ts</code>里就全是这种操作.</li></ul><p>例子中用了两种查询方式,是服务器端组件和SQL查询.<br> 用<code>async await</code>的服务器端组件获取数据时就会出现<strong>request waterfall</strong>请求瀑布的问题.</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//app/lib/data.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchRevenue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Revenue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`SELECT * FROM revenue\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.rows;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Database Error:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to fetch revenue data.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//app/dashboard/page.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> revenue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchRevenue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> latestInvoices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchLatestInvoices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这要等fetchRevenue()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cardData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchCardData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这要等fetchLatestInvoices()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>好处是可以解决数据依赖的问题,比如获取到id才能获取密码.<br> 坏处是如果数据各不相关,网络效率就会很低.<br> 解决办法之一是利用JS原生的<code>Promise.all()</code>或者<code>Promise.allSettled()</code>.<br> 这时就又有问题了,如果有一个请求特别特别慢呢?</p><hr><p>要解决的两个问题:</p><ol><li>request waterfall, 有一个请求特别慢时怎么办?(<code>Streaming</code>)</li><li>静态网页,如果数据需要实时更新,怎么动态渲染?(每次请求都要获取到最新的数据而不是静态的)</li></ol><p>loading.tsx有个问题,文件在顶层,如果加载动画是skeleton模糊框架,那么所有的子路径都会用到这个loading效果.</p><p>grouping routes是什么意思? 为什么是(overview)而不是其它?是怎么限定的?</p><p>Suspense / Loading move fetches down to the components.</p><hr><p>Search and pagination 查找要用<code>useSearchParams</code>可以理解,分页为什么要用到<code>usePathname</code>和<code>useRouter</code>?</p>`,70)]))}const E=i(e,[["render",p]]);export{g as __pageData,E as default};
