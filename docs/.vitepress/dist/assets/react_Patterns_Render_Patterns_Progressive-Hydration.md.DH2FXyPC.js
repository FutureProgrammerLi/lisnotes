import{_ as i}from"./app.4twKycbs.js";import{c as a,o as n,ab as p}from"./chunks/vendor.cEhGAX-6.js";const l="/RenderPatterns/Rendering-ProgressiveHydration.jpg",c=JSON.parse('{"title":"渐进式注水","description":"","frontmatter":{},"headers":[],"relativePath":"react/Patterns/Render_Patterns/Progressive-Hydration.md","filePath":"react/Patterns/Render_Patterns/Progressive-Hydration.md","lastUpdated":1735663067000}'),t={name:"react/Patterns/Render_Patterns/Progressive-Hydration.md"};function e(h,s,k,r,E,d){return n(),a("div",null,s[0]||(s[0]=[p('<h1 id="渐进式注水" tabindex="-1">渐进式注水 <a class="header-anchor" href="#渐进式注水" aria-label="Permalink to “渐进式注水”">​</a></h1><blockquote><p>Progressive Hydration,&quot;注水&quot;的概念感觉有歧义.本质是为元素绑定事件的过程,更&quot;好&quot;的翻译我认为是&quot;武装&quot;,使元素具备事件响应的功能.<br><a href="https://www.patterns.dev/react/progressive-hydration" target="_blank" rel="noreferrer">原文</a></p></blockquote><p>服务器渲染的应用,是在服务器上生成当前导航的HTML.当服务器生成了用于展示的,带有必要的CSS和JSON数据的HTML内容后,就会把这些内容发送到客户端.由于生成的过程发生在服务器上,因此客户端能较快地编译并将内容展示到浏览器上,也就会有比较好看的FCP数据了.(网页应用效率的一个参数).</p><p>尽管服务器端渲染能有好的FCP,但首次交互时间发生(Time to interactive)的时机就可能没那么好看了.<br> 网站用于交互的JS代码加载速度可能不会那么快.换句话说就是,一些按钮虽然展示到了页面上了,但你点它还是会没有反应.只有当对应的事件成功绑定到了元素上,页面加载才算完成了.而这个为元素绑定事件处理器的过程就叫<strong>注水(hydration)</strong>:React对DOM元素节点进行检查,并为节点分别添加上对应的事件处理器.</p><p>用户看到那些看似可以互动,实际却无法互动的这段时间,也被称为&quot;恐怖谷效应&quot;(???): 尽管用户认为网站是可互动有相应的,实际上并非如此,组件里的元素实际上都没绑定上事件处理器.用户就会一脸懵,&quot;这网站也太糟糕了!&quot;.</p><p>DOM节点注水所需的时间可能会很长.组件能注水的前提是,对应的JS文件在浏览器中被加载,被解析,并被完整执行.当然注水可以整个应用同时注水,也可以<em>渐进式地对节点进行注水</em>,这样就能独立地对节点进行注水,尽可能少地请求用于注水的,必要的JS内容了.</p><p>渐进式注水的另一个好处就是,我们可以推迟对一些不太重要的元素进行注水的时间.以此减少为了使页面变得可互动的,所需的JS代码,只在用户需要某些节点的事件时才进行注水.<br> 渐进式注水也能避免SSR重注水的一个缺陷:有时服务器渲染的DOM树会被推倒重建.</p><p>渐进式注水可以根据某些特定条件时才对组件进行注水,比如条件是元素显示到了用户的视窗内才注水.</p><h2 id="渐进式注水的实现" tabindex="-1">渐进式注水的实现 <a class="header-anchor" href="#渐进式注水的实现" aria-label="Permalink to “渐进式注水的实现”">​</a></h2><p>先前我们讨论了服务器渲染的应用在客户端实现注水的过程.注水可以让客户端React识别到,哪些ReactDOM组件是在服务器上渲染的,并对这些组件进行注水.因此,它展现出来的效果就是,实际是服务器端渲染的应用,一致性和无缝性表现得跟客户端渲染得应用别无二致.</p><p>页面上所有需要被注水的组件代码,都应该要以包的形式下载到客户端里.互动性高的单页面应用,由于它们高度依赖JS代码控制,甚至需要第一时间就把整个包加载出来.不过,大部分静态页面一般都只包含少量的需要互动的元素,这些网页上的组件就不需要立即全体被注水.如果真这样做了反而适得其反,不如不用了.</p><p>渐进式注水则解决了这种问题:在用户加载时只对页面的部分内容进行注水,其它部分的注水只在需要时才进行.</p><p><img src="'+l+`" alt="Rendering"> 上图的&quot;You may also like&quot;和&quot;Other Content&quot;这两部分的内容就能用渐进式注水,后续再进行操作.</p><p>注水会从DOM树的根节点开始,而不是一次就对整个应用进行初始化,服务器端渲染的独立片段会在一段时间后再被激活.注水的进程也可能会因为不同分支而被暂停,并在后续某些条件触发后再恢复进行.值得注意的是,用于注水的资源加载也会被code-splitting代码分块的技术而推迟,以便减少使页面变得可互动所需的JS代码量.</p><p>渐进式注水的理念是以块的方式启动网页应用,从而大幅提升网页性能表现.使用了这种技术的开发者除了考虑如何使用外,还要考虑由此可能会怎样影响用户的体验.你当然不能一旦某块加载完就冒泡一样展示到用户界面,也不能阻塞那些加载好的,用户可以互动了的事件.<br> 因此,以下是使用渐进式注水时,整体需要考虑的条件:</p><ol><li>所有组件都可以使用SSR.</li><li>允许将代码分成独立的组件或块</li><li>允许以开发者定义的顺序,在客户端上对这些块注水</li><li>不阻塞用户输入</li><li>被推迟注水的块,在注水时给予用户一些加载指示器用于告知内容加载中</li></ol><p>React并发模式会解决以上所有的需求.这种模式能让React在同一事件处理不同的任务,并根据一定的优先程度在任务间切换.当任务被切换时,正在进行的,已经部分被渲染好的树不需要被提交,这样React才能在任务切换回来后继续进行后续渲染任务.</p><p>并发模式可用于实现渐进式注水.这种情况下,页面上的每个块的注水就独立地成为了React需要进行的任务.如果像用户输入这样高优先级的任务需要被完成,React就会暂停手头的注水任务,切换到接收用户的新任务上.像<code>lazy()</code>,<code>Suspense()</code>这些API,你就可以用来在块懒加载时,显式地声明加载中状态了.</p><p>React并发模式还可以搭配其它特性一同使用</p><ul><li><strong>服务器组件</strong>: 组件内容更新时,允许以组件为单位从服务器上重获取组件内容,并以流的方式传输渲染到客户端上.单位的缩小自然带来效率的提升了.客户端的CPU也会在网络请求等待的这段时间内一同工作(?).</li></ul><p>React有并发模式实现渐进式注水,其它框架也有对应的实现方式.<a href="https://www.youtube.com/watch?v=k-A2VfuUROg&amp;t=960s" target="_blank" rel="noreferrer">Google I/O &#39;19</a>这个视频,展示了用&quot;注水器&quot;(Hydrator)的方式,选择页面上需要被注水的部分.后来也有很多基于这种方式实现的注水,像Vue,Angular,Next.js等框架也有各自的注水方式.</p><p>我们来看看用Preact和Next是如何实现的:</p><p>例子中用了以下库来实现部分注水:</p><ol><li><code>pool-attendant-preact</code>: preact x实现部分注水的库</li><li><code>next-super-performance</code>: Next插件用到的,用于提升客户端性能的库</li></ol><p><code>pool-attendant-preact</code>提供了一个叫<code>withHydration</code>的API,给你标记那些需要更有可能互动的组件.被标记的组件会先被注水.你可以像这样定义你的页面内容:</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Teaser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./teaser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { withHydration } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pool-attendant-preact&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HydratedTeaser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> withHydration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Teaser);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HydratedTeaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HydratedTeaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;        </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Teaser</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>第二三列的<code>&lt;HydratedTeaser/&gt;</code>会被优先注水.你可以用这个库提供的<code>hydrate()</code>API,对剩余的组件进行注水.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {hydrate} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next-super-performance&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Teaser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./components/teaser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hydrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([Teaser]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>而下面的<code>&lt;HydrationData/&gt;</code>组件则用于向客户端输入序列化的props.这样就能确保被注水的组件能获取到必要的props了.</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../../components/header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../../components/main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {HydrationData} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next-super-performance&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HydrationData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to “优缺点”">​</a></h2><p>渐进式注水提供服务器端渲染和客户端注水的功能,最小化注水的代价.以下是前面这句话的展开:</p><ol><li><strong>更好的代码分割</strong>: 代码分割是渐进式注水能实现的至关前提,因为那些独立懒加载的组件就是以代码块的方式实现的.</li><li><strong>允许按需加载那些用户不太常用的网页部分</strong>: 网页上可能会存在内容较为静态的组件,或者说一些视口外的内容用户并不会用到.这些组件就跟懒加载技术相当匹配.页面首次加载时,为这些组件注水的代码就可以先不用发送到客户端,只在后续的一些条件被触发后再进行请求加载.</li><li><strong>减少打包体积</strong>: 代码分割的结果自然就会减少打包的体积.需要执行的代码少了,FCP和TTI之间的时间自然就少了.(First Contentful Paint, Time to Interactive)</li></ol><p>缺点可能是,不太适合那些&quot;动态页面&quot;,几乎所有页面内容都是可互动的,加载时用户就要对页面的所有部分进行互动的应用.从开发者角度说就是,无法确定页面加载时,用户会在网页的哪个部分进行互动,输入等操作.(hydrate无对象)</p><hr><p>感谢你能看到这里.新年快乐! 2025.01.01.</p>`,36)]))}const y=i(t,[["render",e]]);export{c as __pageData,y as default};
