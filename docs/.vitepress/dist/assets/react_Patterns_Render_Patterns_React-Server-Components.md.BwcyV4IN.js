import{_ as i}from"./app.DJMRJ_62.js";import{c as a,o as n,Z as e}from"./chunks/vendor.JG3V3vMx.js";const c=JSON.parse('{"title":"React服务器组件","description":"","frontmatter":{},"headers":[],"relativePath":"react/Patterns/Render_Patterns/React-Server-Components.md","filePath":"react/Patterns/Render_Patterns/React-Server-Components.md","lastUpdated":1736300469000}'),t={name:"react/Patterns/Render_Patterns/React-Server-Components.md"};function l(p,s,r,h,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="react服务器组件" tabindex="-1">React服务器组件 <a class="header-anchor" href="#react服务器组件" aria-label="Permalink to &quot;React服务器组件&quot;">​</a></h1><blockquote><p><a href="https://www.patterns.dev/react/react-server-components" target="_blank" rel="noreferrer">原文</a><br> 翻译这篇文章的时候React已经v19了.v18的内容我就自动忽略了.</p></blockquote><p>React团队正在开发着0打包体积的服务器组件功能,旨在将服务器驱动的心智模式(server-driven mental model)运用到用户体验上.这跟服务器渲染组件的概念大有不同,可以获得更小的客户端JS打包代码体积.</p><p>这个开发方向是令人振奋的,虽然目前还未能用到生产环境,但我们认为您应该持续关注这方面消息.你可能会对以下内容感兴趣:</p><ul><li><a href="https://www.youtube.com/watch?v=TQQPAU21ZUw&amp;feature=emb_title" target="_blank" rel="noreferrer">Dan Abramov和Lauren Tan的演讲</a>,以及这个<a href="https://github.com/reactjs/rfcs/blob/bf51f8755ddb38d92e23ad415fc4e3c02b95b331/text/0000-server-components.md" target="_blank" rel="noreferrer">RFC</a>.</li></ul><h2 id="服务器端渲染的一些限制" tabindex="-1">服务器端渲染的一些限制 <a class="header-anchor" href="#服务器端渲染的一些限制" aria-label="Permalink to &quot;服务器端渲染的一些限制&quot;">​</a></h2><p>如今的服务器端渲染客户端JS代码的方法并不是最优的.组件代码在服务器上被渲染成HTML字符串,这些字符串被发送到浏览器上,之后被解析渲染出来.结果看起来是不错的,首屏有意义及最大有意义渲染所需的时间(FCP,LCP)都很小.</p><p>不过,JS代码仍旧需要从服务器上获取,通过注水的方式使得页面内容可交互.服务器端渲染一般只用来提升首屏加载性能,而完成注水后我们就很少利用到这个技术了.</p><p><strong>值得注意的是:</strong><br> 尽管我们可以构建一个完全使用SSR的React应用,直接不在客户端上注水了,可是,以这种模式实现的,互动性强的应用,很可能就要超出React范围了.而如果采用了这种&quot;混合&quot;模式,运用服务器组件的话,就能以组件的单位决定,前面提过的,可能会超出React范围的内容界定.</p><p>有了服务器组件,我们可以频繁地重新从服务器上获取组件代码.应用虽然有些组件,数据更新时就要重渲染,但它是在服务器上进行的,这样可以限制发送给客户端所需的代码量.</p><blockquote><p><strong>&quot;[RFC]: 开发者经常要决定使用什么三方库来渲染网页内容.用库来渲染一些Markdown,或格式化日期数据对于开发者而言确实会更方便,但后果是,扩大了应用代码体积,影响了用户性能.&quot;</strong></p></blockquote><div class="language-JS vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NoteWithMarkdown.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有服务器组件时渲染markdown内容,三方库的体积:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> marked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;marked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 35.9K (11.2K gzipped)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sanitizeHtml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sanitize-html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 206K (63.3K gzipped)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NoteWithMarkdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sanitizeHtml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">marked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* render */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="服务器组件" tabindex="-1">服务器组件 <a class="header-anchor" href="#服务器组件" aria-label="Permalink to &quot;服务器组件&quot;">​</a></h2><p>React服务器组件,弥补了服务器端渲染的一些缺点:不增加打包体积的前提下,增加渲染了一层中间抽象的格式.这不仅可让不丢失状态的情况下,结合服务器端树和客户端树,还能让组件的规模逐渐变大.</p><p>服务器组件不是用来取代SSR的.我们可以配合使用它们,利用服务器组件可以快速渲染出一个中间层格式,利用服务器端渲染,提升首屏渲染.我们服务器渲染客户端组件,而用服务器组件,参考SSR获取数据的机制,对组件内容进行更新.</p><p>这样可以大幅度减少打包后的代码体积.初步估计能减少个18-29%.而React团队仍致力于这方面的工作,力求进一步的提升.</p><blockquote><p><strong>[RFC]: 我们可以直接把上面的代码,完整迁移到服务器组件当中,保持原有功能的前提下,不将包发送给客户端 - 这样起码减少了240K的代码量(未被压缩的情况下).</strong></p></blockquote><div class="language-JS vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NoteWithMarkdown.server.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> marked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;marked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// zero bundle size</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sanitizeHtml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sanitize-html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// zero bundle size</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NoteWithMarkdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // same as before</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="自动代码分割" tabindex="-1">自动代码分割 <a class="header-anchor" href="#自动代码分割" aria-label="Permalink to &quot;自动代码分割&quot;">​</a></h2><p>使用代码分割,只将用户用到的代码发送给用户,向来是一种好方法.通过代码分割,可以把应用代码分成多个小块,尽可能少地发送给客户端.在服务器组件诞生之前,开发者可能需要调用<code>React.lazy()</code>API,手动划分&quot;分割点&quot;,或者利用一整套打包工具提供的功能才能实现,比如通过划分路由/页面,创建不同的新快.</p><div class="language-JS vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// PhotoRenderer.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当需要渲染到客户端上时,以下的一种才会开始渲染</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OldPhotoRenderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./OldPhotoRenderer.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NewPhotoRenderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./NewPhotoRenderer.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Photo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Switch on feature flags, logged in/out, type of content, etc:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //根据标识,登入登出,内容的类型采用不同的渲染器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FeatureFlags.useNewPhotoRenderer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NewPhotoRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props} /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhotoRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props} /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>代码分割可能遇到的困难会是:</strong></p><ul><li>如果你没有采用一些像Next这样的框架(meta-framework),你可能就要手动编写这种优化代码了,手动将<code>import</code>替换成动态导入.</li><li>用户用到才开始加载组件的方法可能会影响到用户体验</li></ul><p>服务器组件自带代码分块功能,将客户端组件内的导入都视为&quot;分割点&quot;.也让开发者可以选择那些组件需要更早地被渲染(在服务器上进行),客户端更早地在渲染过程中获取某些组件代码.</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// PhotoRenderer.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// one of these will start loading *once rendered and streamed to the client*:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 区别是省掉了lazy, 动态引入的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OldPhotoRenderer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./OldPhotoRenderer.client.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NewPhotoRenderer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./NewPhotoRenderer.client.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Photo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Switch on feature flags, logged in/out, type of content, etc:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FeatureFlags.useNewPhotoRenderer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NewPhotoRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props} /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhotoRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props} /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="服务器组件将来会取代next的ssr吗" tabindex="-1">服务器组件将来会取代Next的SSR吗? <a class="header-anchor" href="#服务器组件将来会取代next的ssr吗" aria-label="Permalink to &quot;服务器组件将来会取代Next的SSR吗?&quot;">​</a></h2><p>不会,它们其实很不同.服务器组件的初次采用及后续的功能实现,进一步开发都需要使用Next这样的meta-framework.</p><p>借用Dan Abramov的话,对SSR和服务器组件的区别进行一个总结:</p><ul><li><strong>服务器组件的代码不会发送给客户端.</strong> React实现的SSR,组件代码都会以打包的方式发送给客户端,而这个过程可能会使网站的首次可交互时间变长.</li><li><strong>服务器组件可在组件树的任意位置读取到后端代码.</strong> 用Next的话,你可用<code>getServerProps()</code>访问后端,不过限制是你必须页面的顶端使用.npm组件是实现不了这个功能的.</li><li><strong>服务器组件代码可在维持客户端状态的状态下,重新从服务器端获取.</strong> 因为其中的传输机制更为丰富与复杂,而不仅限于HTML字符串.这种机制可以不改变组件状态(比如搜索框输入的内容/聚焦/文本选择等)的同时,重新获取某些由服务器端渲染的部分片段(比如搜索结果列表).</li></ul><p>早期如果要整合服务器组件功能,需要webpack组件实现以下功能:</p><ul><li>定位所有的客户端组件</li><li>构建匹配关系,将块ID对应到块URL上</li><li>Node.js加载器,将客户端内的导入内容,替换成以上匹配规则</li><li>有些插件还需要更多更复杂的适配条件(比如还要结合配置路由规则),因此我们还是建议您使用像Next这样的框架实现这个功能.</li></ul><p>正如Dan所说,服务器组件的功能其实是为了让Next框架变得更好的.</p><h2 id="更多相关学习资源及使用反馈" tabindex="-1">更多相关学习资源及使用反馈 <a class="header-anchor" href="#更多相关学习资源及使用反馈" aria-label="Permalink to &quot;更多相关学习资源及使用反馈&quot;">​</a></h2><p>更多服务器组件相关内容,我的建议是看<a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html" target="_blank" rel="noreferrer">Dan和Lauren的这个演讲</a>,自己上手<a href="http://github.com/reactjs/server-components-demo" target="_blank" rel="noreferrer">尝试一下</a>.十分感谢Sebastian Markbåge,Lauren Tan, Joseph Savnoa和Dan Abramov对服务器组件开发的贡献!</p><p>相关内容:</p><ul><li><a href="https://twitter.com/sugarpirate_/status/1341141198258524163" target="_blank" rel="noreferrer">Lauren Tan谈服务器组件</a></li><li><a href="https://twitter.com/sophiebits/status/1341098388062756867" target="_blank" rel="noreferrer">Sophie Alpert的解释</a></li><li><a href="https://twitter.com/sebmarkbage/status/1341102430147276803" target="_blank" rel="noreferrer">Sebastian Markbåge关于注水的讨论</a></li><li><a href="https://news.ycombinator.com/item?id=25497065" target="_blank" rel="noreferrer">HN discussion on thread</a></li></ul>`,36)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
