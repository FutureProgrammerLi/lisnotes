import{_ as t}from"./app.DOQjh19Y.js";import{c as n,o as l,x as s,ab as e,a as i}from"./chunks/vendor.Behu2R7A.js";const u=JSON.parse('{"title":"自己写Server Actions遇到的问题","description":"","frontmatter":{},"headers":[],"relativePath":"react/Practice/Server-Actions.md","filePath":"react/Practice/Server-Actions.md","lastUpdated":1738226181000}'),r={name:"react/Practice/Server-Actions.md"};function p(o,a,h,c,k,d){return l(),n("div",null,a[0]||(a[0]=[s("h1",{id:"自己写server-actions遇到的问题",tabindex:"-1"},[i("自己写Server Actions遇到的问题 "),s("a",{class:"header-anchor",href:"#自己写server-actions遇到的问题","aria-label":"Permalink to “自己写Server Actions遇到的问题”"},"​")],-1),s("div",{class:"danger custom-block"},[s("p",{class:"custom-block-title"},"DANGER"),s("p",null,[i("重点放开头: Next app目录下,actions文件夹的内容默认"),s("strong",null,"不是"),i("在服务器上运行的."),s("br"),s("span",{className:"text-red-500 font-bold"},'记得在actions的文件里,手动添加上"use server"这条指令.')])],-1),e(`<h2 id="调试过程" tabindex="-1">调试过程 <a class="header-anchor" href="#调试过程" aria-label="Permalink to “调试过程”">​</a></h2><p>问题根源: 单独触发一个server action时,可以正常运行,添加或删除数据库的内容.<br><strong>但</strong>,更新后的内容没有触发页面的重渲染.<br> 简单说:</p><ol><li>有3个server actions: <code>getList</code>,<code>createItem</code>,<code>deleteItems</code>.分别是获取全部内容,添加新内容,删除内容.</li><li>触发<code>createItem</code>,或<code>deleteItems</code>时,页面没有重渲染.数据库的内容被变更了,但没有反应到页面上.</li></ol><p>尝试解决办法:</p><ol><li><p>调用<code>revalidatePath(&#39;/&#39;)</code>, 以及<code>revalidateTag(&#39;item&#39;)</code>.无果, 报错: &quot;static generation store missing in revalidatePath / revalidateTag.&quot;</p></li><li><p>以为fetch缓存出现问题, 设置了<code>export const dynamic = &#39;force-dynamic</code>,以及<code>export const revalidate = 0</code>.无果.</p></li><li><p>以为fetch本身设置出现问题,改用axios发起请求.无果.</p></li><li><p>参考之前官方例子,用的是<code>useActionState</code>,跟自己的区别是例子里都要把事件触发改为form action.硬要把某些元素包裹到form里,比如input,button.只是不显示到页面上而已.<br> 于是把<code>createItem</code>改为form action.触发元素包裹到form里.跟官方的例子进行一一比对.</p></li></ol><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">formAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useActionState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(getList,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{createItem}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Create&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,6),s("p",null,[i("最后还是无果,不过初见端倪:"),s("br"),i(" 这时应该要了解到了,"),s("span",{className:"text-red-500 font-bold"},"同样的console.log()语句,官方可行的例子会出现到终端命令行,而自己写的例子则出现到了浏览器控制台.")],-1),e('<ol start="5"><li>改用<code>useActionState</code>依然无果, 直接在Next安装了mongoose,连接,创建访问数据库collection.<br> 新问题又出现了, 同样的<code>new Blog({/**...*/})</code>创建新文档语句,同样的<code>BlogModel.save()</code>保存语句.<br><strong>官方例子里log出来是Async function,自己log出来的是undefined.</strong></li></ol><h2 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to “结果”">​</a></h2><p>问题的答案找出来了:<strong>自己写的actions被当作客户端函数,在客户端上被执行了.</strong><br> Server Actions你猜为什么是&quot;Server&quot; Actions? 因为它就是要服务器上运行才是正确的.</p>',3),s("p",null,[s("span",{className:"text-red-500 font-bold text-xl"},'重复一句: 记得在actions的文件里,手动添加上"use server"这条指令.')],-1),s("hr",null,null,-1),s("p",null,"回头看这个问题实在幼稚, 自己在各种论坛上找各种解决办法,其实解决办法别人也是说过的,(x的一条post以及论坛上的一条评论都说过),但自己就是没留意到. 虽然这个问题是解决了,但中途找到了React官方文档更新了关于Server Actions的文档,很感兴趣,去翻译了解一下.",-1),s("p",null,"感谢你能看到这里!",-1)]))}const m=t(r,[["render",p]]);export{u as __pageData,m as default};
