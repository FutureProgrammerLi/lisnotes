import{_ as i}from"./app.CBEB_U2i.js";import{c as a,o as e,ad as l}from"./chunks/vendor.G7bju0he.js";const g=JSON.parse('{"title":"Vue3.6: Vapor Mode opening virtual DOM era","description":"","frontmatter":{},"headers":[],"relativePath":"vue/Vapor/Medium-post.md","filePath":"vue/Vapor/Medium-post.md","lastUpdated":1755259134000}'),n={name:"vue/Vapor/Medium-post.md"};function t(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue3-6-vapor-mode-opening-virtual-dom-era" tabindex="-1">Vue3.6: Vapor Mode opening virtual DOM era <a class="header-anchor" href="#vue3-6-vapor-mode-opening-virtual-dom-era" aria-label="Permalink to “Vue3.6: Vapor Mode opening virtual DOM era”">​</a></h1><blockquote><p><a href="https://medium.com/@sampan090611/vue-3-6-vapor-mode-opening-virtual-dom-era-dfd10023cd05" target="_blank" rel="noreferrer">原文地址</a></p></blockquote><p>Vue3.6的Vapor Mode可以让你直接跳过需您DOM,直接跟真实DOM进行互动.你只需要添加一个标记,就可以巨幅提升应用速度,打包出更小的代码包.<br> 以下就是具体的操作</p><h2 id="虚拟dom是什么" tabindex="-1">虚拟DOM是什么 <a class="header-anchor" href="#虚拟dom是什么" aria-label="Permalink to “虚拟DOM是什么”">​</a></h2><p>浏览器是通过变更DOM树来改变页面的内容的.早期的前端框架直接手动修改DOM树,问题是效率很低,而且还容易出错.虚拟DOM则缓解了这些问题,通过在内存中保留DOM的轻量化代表实现.当数据发生变化时,框架会做以下操作:</p><ol><li>渲染一棵新的虚拟DOM树</li><li>与旧的VDOM树进行对比(diff)</li><li>找出需要更新的DOM的最小部分</li><li>将这些变化应用到真实DOM上</li></ol><p>这样你旧可以不直接对DOM进行操作,将多个更新整合成单独一个了.不过还是会存在不足:创建新树和新旧树之间的对比依旧耗费大量CPU性能和内存占用.<br> 面对这种情况,Vue3特此在编译器上做了些优化工作(静态提升,标签添加),以尽量减少不必要的工作.不过可惜,这样做还是会在运行时构建虚拟节点,还是需要对比diff VDOM.</p><h2 id="vapor-mode是如何工作的" tabindex="-1">Vapor Mode是如何工作的 <a class="header-anchor" href="#vapor-mode是如何工作的" aria-label="Permalink to “Vapor Mode是如何工作的”">​</a></h2><p>Vapor Mode跳过了运行时的VDOM.编译器将<code>&lt;template&gt;</code>标签中的内容直接转变为更新DOM的代码.它不会创建VNode对象并对它们进行对比,而是生成相应的函数,这些函数会:</p><ul><li>创建DOM节点</li><li>精确追踪哪些节点依赖了哪些响应值</li><li>当且仅当值发生变化时对响应节点进行更新.</li></ul><p>实际编程中你编写的代码其实跟Vue3一开始是没什么区别的:</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vapor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {ref} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Count: {{count}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>留意到<code>&lt;script&gt;</code>标签里的<code>vapor</code>,经编译后它会变成类似注释的代码:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create &lt;button&gt;, set text and click handler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// track \`count\` so only text node updates on change</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>单单这个标签的添加,就把虚拟DOM的构建和diff过程给去掉了.它利用的是Vue自身的响应性系统(Proxy+effect tracking),只运行需要的对应更新函数.也就是说浏览器需要编译的JS代码量减少了,内存也不需要占用太多的内存来保留节点信息,更新速度也有所提升了.</p><h2 id="性能提升" tabindex="-1">性能提升 <a class="header-anchor" href="#性能提升" aria-label="Permalink to “性能提升”">​</a></h2><p>经过多个权威测试,Vapor Mode简直赢麻了:</p><ul><li>打包体积(以Hello World为例):</li></ul><ol><li>VDOM版本: 22.8kB</li><li>Vapor : 7.9kB</li></ol><ul><li>复杂列表diff耗时</li></ul><ol><li>VDOM版本: 基准时间(1x)</li><li>Vapor: 1.66*速度(大约比VDOM快了40%)</li></ol><ul><li>内存占用</li></ul><ol><li>VDOM版本: 100%(基准)</li><li>Vapor: 58%(直接少了42%)</li></ol><p>一句话总结: 首次加载JS代码量少了三分二,运行时内存占用直接减半.</p><h2 id="如何启用vapor-mode" tabindex="-1">如何启用Vapor Mode <a class="header-anchor" href="#如何启用vapor-mode" aria-label="Permalink to “如何启用Vapor Mode”">​</a></h2><ol><li>启用</li></ol><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vapor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// your code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>Options API 不支持Vue2的用法了,限定在<code>&lt;script setup&gt;</code>标签里了.</li><li>自定义指令 参数包括一个响应式的getter function,还可以返回一个清除函数:</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDirective</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">valueGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        el.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> valueGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clean when uninstalling&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li>你可以直接用上面的形式重写已有的自定义指令</li><li>与UI库互动<br> 使用<code>vaporInteropPlugin</code>插件,可以将Vapor模式跟Element Plus或Ant Design Vue混合到一起使用.基本的props,事件定义,插槽功能是可以实现的.其它复杂的用途则仍需进一步测试.</li><li>createVaporApp 新的项目可以直接实现无VDOM运行时</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vapor</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="何时使用vapor-mode-3用3不用" tabindex="-1">何时使用Vapor Mode?(3用3不用) <a class="header-anchor" href="#何时使用vapor-mode-3用3不用" aria-label="Permalink to “何时使用Vapor Mode?(3用3不用)”">​</a></h2><p>✅ 性能要求高的模块(首页/落地页等)<br> ✅ 新项目(直接用createVaporApp)<br> ✅ 内部测试:文件问题,运行测试,帮助提升</p><p>❌ 不要直接一次性迁移整个项目(部分功能仍在测试)<br> ❌ Nuxt SSR,<code>&lt;Transition&gt;</code>,<code>&lt;KeepAlive&gt;</code>等起作用时不要随便使用Vapor Mode.<br> ❌ 不要随意与深度嵌入VDOM的三方库混合使用</p><h2 id="_5个开发者最想知道的问题" tabindex="-1">5个开发者最想知道的问题 <a class="header-anchor" href="#_5个开发者最想知道的问题" aria-label="Permalink to “5个开发者最想知道的问题”">​</a></h2><ol><li>我需要重写旧代码吗?<br> 不需要.直接在<code>&lt;script setup&gt;</code>标签里加多个<code>vapor</code>就可以了.模板和setup工作的逻辑还是之前那样的.</li><li>自定义指令呢?需不需要重写?<br> 建议重写.直接利用官方的codemod对旧指令进行转变.(?)</li><li>用了Vapor Mode还能不能用Element Plus或Ant Design Vue?<br> 可以,使用<code>vaporInteropPlugin</code>插件.组件复杂的话建议自行谨慎测试.</li><li>Vapor Mode支持Typescript吗?<br> 完全支持.类型支持并无发生变化.Vue在<code>@vue/runtime-core</code>里还添加了<code>VaporComponent</code>类型帮助你编写启用了Vapor Mode的组件.开发者无需额外的配置项</li><li>Vapor Mode跟React的并行模式,或者Angular的Signals对比效果如何?<br> 启用了Vapor模式的Vue直接比肩Solid和Svelte.而且这种模式的代码迁移量小到几乎可以忽略--加个标签就行了.</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>Vapor Mode的出现可以说是象征性的,它秉承了一贯的优秀:&quot;难的东西交给编译器做&quot;.它将diff过程迁移到打包时,这样你就可以更专注于编写更快的应用了.Vue3.6稳定版本会在2025年底发布-- 试试在某些需要性能提升的页面上启用吧,你会感到惊喜的!</p>`,39)]))}const E=i(n,[["render",t]]);export{g as __pageData,E as default};
