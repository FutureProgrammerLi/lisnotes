import{_ as a}from"./app.Bv-z55EP.js";import{c as o,o as r,ad as l}from"./chunks/vendor.G7bju0he.js";const i="/vapor/talk.png",t="/vapor/evolution.png",d="/vapor/progress.png",v=JSON.parse('{"title":"Vue3.6预热 & 蒸发模式 -- 尤雨溪2025演讲中的一些理解","description":"","frontmatter":{},"headers":[],"relativePath":"vue/Vapor/Preview.md","filePath":"vue/Vapor/Preview.md","lastUpdated":1754928059000}'),s={name:"vue/Vapor/Preview.md"};function n(p,e,u,h,c,V){return r(),o("div",null,e[0]||(e[0]=[l('<h1 id="vue3-6预热-蒸发模式-尤雨溪2025演讲中的一些理解" tabindex="-1">Vue3.6预热 &amp; 蒸发模式 -- 尤雨溪2025演讲中的一些理解 <a class="header-anchor" href="#vue3-6预热-蒸发模式-尤雨溪2025演讲中的一些理解" aria-label="Permalink to “Vue3.6预热 &amp; 蒸发模式 -- 尤雨溪2025演讲中的一些理解”">​</a></h1><blockquote><p><a href="https://vueschool.io/articles/news/vn-talk-evan-you-preview-of-vue-3-6-vapor-mode/" target="_blank" rel="noreferrer">原文地址(vueschool)</a><br><a href="https://www.youtube.com/watch?v=zvjOT7NHl4Q" target="_blank" rel="noreferrer">演讲视频(youtube)</a></p></blockquote><p>这篇文章是基于尤雨溪在Vue Nation 2025演讲中的一些理解.演讲中,尤雨溪介绍了Vue3.6的一些新特性,其中就包括了最受期待的Vapor Mode蒸发模式.</p><h2 id="vue3-6及蒸发模式的介绍" tabindex="-1">Vue3.6及蒸发模式的介绍 <a class="header-anchor" href="#vue3-6及蒸发模式的介绍" aria-label="Permalink to “Vue3.6及蒸发模式的介绍”">​</a></h2><p>演讲开始,尤雨溪就强调了,Vue3.6版本很好地提升了开发者体验以及应用性能.像Vapor Mode这样地新特性更是颠覆了开发者以往与框架交互的方式,提供了更强大的开发灵活性及提高了开发效率.Vue Vapor是Vue的一个变种(variant),可以没有虚拟DOM的情况下进行页面渲染.它是由尤雨溪,Kevin Dang创造的,其他主要贡献者包括Rizumu Ayaka, Ubugeeei, Doctor Wu等.</p><h2 id="vue3-6-响应性性能的提升" tabindex="-1">Vue3.6: 响应性性能的提升 <a class="header-anchor" href="#vue3-6-响应性性能的提升" aria-label="Permalink to “Vue3.6: 响应性性能的提升”">​</a></h2><blockquote><p>&quot;The first, foremost, and most important thing is a massive reactivity performance improvement.&quot; ~尤雨溪</p></blockquote><p>Vue3.6主要的一个变化就是响应性性能的提升.这种提升延续了之前3.4/3.5版本的趋势,着手于核心响应性系统以提升性能.当然,Vue的响应性系统从最初的版本开始,就是在不断地完善进化.到了Vue3版本,一个主要的优化就是利用Proxy,对原始值的响应性进行了底层重构,比如<code>refs</code>,<code>shadowRefs</code>,<code>computed</code>,<code>effects</code>等.</p><h2 id="与其它框架的对比及vue未来的潜在优势" tabindex="-1">与其它框架的对比及Vue未来的潜在优势 <a class="header-anchor" href="#与其它框架的对比及vue未来的潜在优势" aria-label="Permalink to “与其它框架的对比及Vue未来的潜在优势”">​</a></h2><p>Vue的方案跟当今已有的许多框架相似,都利用了一个存在已久的概念,就是&quot;signals(信号)&quot;.由于这种模型能很好的显式声明状态之间的关系,所以它也逐渐被认为是前端开发的一种理想模型.此番言论并非空穴来风:TC39委员会甚至提案,为&quot;signals&quot;标准化为语言本身的一部分.(虽然说也不知道什么时候才能真正落地)</p><p>尤大也说过,Vue.js会在每个版本都有革新式变化,并且他也承诺3.6版本会与当今的开发范式相匹配,在响应性性能表现上做出实质性提升.让我们共同期待未来的更新,期待标准化信号带来的巨大性能提升吧.</p><h2 id="理解vapor-mode" tabindex="-1">理解Vapor Mode <a class="header-anchor" href="#理解vapor-mode" aria-label="Permalink to “理解Vapor Mode”">​</a></h2><p><img src="'+i+'" alt="talk"></p><p><strong>Vapor Mode</strong>是一种革新式概念,大大提升了Vue的渲染性能.开发者可以在这种模式下,利用相同的源代码,得到更高效编译结果.换句话说,我们不需要学习新的内容,利用已有的API,就能享受到更高的性能,更少的内存占用.<br> Vapor Mode一个突出的特点是,它能将性能提升到像Solid.js这样以高效渲染效率著称的框架一样.</p><h2 id="达到solid-js那样的性能表现" tabindex="-1">达到Solid.js那样的性能表现 <a class="header-anchor" href="#达到solid-js那样的性能表现" aria-label="Permalink to “达到Solid.js那样的性能表现”">​</a></h2><blockquote><p>&quot;It allows Vue&#39;s rendering performance to reach the level of Solid.js&quot; ~尤雨溪</p></blockquote><h2 id="兼容性和灵活性" tabindex="-1">兼容性和灵活性 <a class="header-anchor" href="#兼容性和灵活性" aria-label="Permalink to “兼容性和灵活性”">​</a></h2><p>蒸发模式从设计开始就想好如何兼容了.它能与现有的代码库无缝连接,开发者可以选择性地在应用中使用:性能敏感的模块就用,不敏感的就不用.这种灵活性不仅支持部分的版本迁移,更确保了应用版本的平滑过渡.</p><h2 id="vue-js渲染策略的进化" tabindex="-1">Vue.js渲染策略的进化 <a class="header-anchor" href="#vue-js渲染策略的进化" aria-label="Permalink to “Vue.js渲染策略的进化”">​</a></h2><p>想更深刻地理解Vapor Mode的话,了解Vue渲染机制一路是怎么过来也是很有帮助的.</p><ul><li><strong>Vue1</strong>: 利用基于DOM的模板系统策略,为模板创建真实DOM节点,并对它们进行响应性绑定.</li><li><strong>Vue2</strong>: 改用了完全虚拟DOM的方法策略,虽然是允许了服务器端渲染了,但也带来了一些内存占用的问题.</li><li><strong>Vue3</strong>: 利用更强大的编译器,提升了虚拟DOM的性能,通过静态分析和优化代码生成,实现了更好的运行时性能表现.</li></ul><h2 id="蒸发模式的开发与整合" tabindex="-1">蒸发模式的开发与整合 <a class="header-anchor" href="#蒸发模式的开发与整合" aria-label="Permalink to “蒸发模式的开发与整合”">​</a></h2><p><img src="'+t+'" alt="evolution"></p><p>蒸发模式是Vue3.6的一个新特性,通过尝试消除虚拟DOM的方法进一步提升性能.它通过生成&quot;像人优化过&quot;那样的代码来提升性能.这种转变旨在简化运行时,减少与复杂优化路径相关的潜在隐患.</p><h2 id="vapor-mode的开发过程" tabindex="-1">Vapor Mode的开发过程 <a class="header-anchor" href="#vapor-mode的开发过程" aria-label="Permalink to “Vapor Mode的开发过程”">​</a></h2><p>VaporMode最初是在独立的仓库&quot;View Vapor&quot;中开发的,用以迅速迭代自身版本而不影响贮藏库.如今VaporMode已经整合到Vue核心仓库中了,其中的PR少说也有几百个了.如今二者整合了,也就更好的与已有的基础Vue Core及后续的开发进行联合同步了.</p><h2 id="组件模式的提升" tabindex="-1">组件模式的提升 <a class="header-anchor" href="#组件模式的提升" aria-label="Permalink to “组件模式的提升”">​</a></h2><p>另一个新版本的提升是,通过重新设计了用于懒初始化组件属性插槽的实现方式,从而降低了组件初始化的代价.这种方法带来了实质性的性能提升:哪怕挂在100,000个组件也只需要100ms了.</p><h2 id="整合到vue核心代码" tabindex="-1">整合到Vue核心代码 <a class="header-anchor" href="#整合到vue核心代码" aria-label="Permalink to “整合到Vue核心代码”">​</a></h2><p>这个整合策略使&quot;混合组件树&quot;成为可能.你的组件树中可以有Vapor Mode的组件,也可以有传统的组件.这样就可以部分享受Vapor Mode带来的性能提升,部分维持过去已有的VDOM组件了.</p><h2 id="生态系统的更新-void-0-rolldown-1-0以及其它" tabindex="-1">生态系统的更新,Void(0),Rolldown 1.0以及其它 <a class="header-anchor" href="#生态系统的更新-void-0-rolldown-1-0以及其它" aria-label="Permalink to “生态系统的更新,Void(0),Rolldown 1.0以及其它”">​</a></h2><p>24年12月,Rolldown1.0beta已经发布了.它的出现就是像取代Rollup,esbuild这些工具的.<br> Rolldown在处理拉规模项目时时相当高效的.性能指标对比esbuild和其它基于Rust的打包器更是遥遥领先.</p><h2 id="性能指标与对比" tabindex="-1">性能指标与对比 <a class="header-anchor" href="#性能指标与对比" aria-label="Permalink to “性能指标与对比”">​</a></h2><p>Rolldown的速度简直快到你难以想象:</p><ul><li>比其它Rust-based 打包器起码快3倍</li><li>总体上就是比esbuild快(多喝Linux机器上测的)</li></ul><p>我们还想强调一下Rolldown WebAssembly的构建性能.它在浏览器环境中(如StackBlitz)中的打包模块速度也是比esbuild快得多.</p><h2 id="rolldown未来的发展趋势及目标" tabindex="-1">Rolldown未来的发展趋势及目标 <a class="header-anchor" href="#rolldown未来的发展趋势及目标" aria-label="Permalink to “Rolldown未来的发展趋势及目标”">​</a></h2><p>Rolldown未来开发重点也是很让人期待的:</p><ul><li>生态系统的CI整合: 期望通过更多的测试,以在不同的环境中提供更加稳定的性能表现</li><li>全打包模式: 避免由于dev servers带来的启动项目时带来的性能问题.</li><li>模块联邦: Webpack开发者强力恳求推出的功能.</li><li>Rolldown环境下的API支持: 全栈应用中,用Rust取代JS语言的转换,从而提高SSR性能.</li></ul><p><img src="'+d+'" alt="progress"></p><p>蓝图有了,但也离不开开发者的使用反馈.消费者才是&quot;最重要&quot;的生产者.</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>Vue.js 3.6将推出革新式提升性能框架,改善开发者体验的变化.Vapor Mode的诞生,将让开发者在不改变已有代码库的前提下,体验到无比高效的渲染效率.这种模式,还有一系列重大的响应性性能提升,将Vue.js置于现代前端开发的龙头位置.</p><p>将Vapor Mode整合到Vue核心库,意味着Vue渲染策略发生了重大的转换,也让开发者无缝衔接的同时享受到性能提升的好处.同时,像Rolldown这样的生态工具,必将重新定义项目构建的体验.</p><p>Vue本身不断在进化,开发者也应不断地进步,有了开发者的反馈框架才能更好的发展.无论你是在优化已有的项目或正打算开发新项目,Vue3.6都会为你提供高性能,规模灵活的代码基础方案.让我们一起期待Vue.js 3.6的正式发布吧!</p>',45)]))}const f=a(s,[["render",n]]);export{v as __pageData,f as default};
